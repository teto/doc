["src/nvim/os/dl.c", ["  gen_fn fn;", "  if (uv_dlsym(&lib, funcname, (void **) &fn)) {", "      EMSG2(_(\"dlerror = \\\"%s\\\"\"), uv_dlerror(&lib));"], "whitespace/cast"]
["src/nvim/os/dl.c", ["  if (str_out) {", "    str_str_fn sfn = (str_str_fn) fn;", "    int_str_fn ifn = (int_str_fn) fn;"], "whitespace/cast"]
["src/nvim/os/dl.c", ["    str_str_fn sfn = (str_str_fn) fn;", "    int_str_fn ifn = (int_str_fn) fn;", ""], "whitespace/cast"]
["src/nvim/os/dl.c", ["    // assume that ptr values of NULL, 1 or -1 are illegal", "    *str_out = (res && (intptr_t) res != 1 && (intptr_t) res != -1)", "        ? xstrdup(res) : NULL;"], "whitespace/cast"]
["src/nvim/os/dl.c", ["  } else {", "    str_int_fn sfn = (str_int_fn) fn;", "    int_int_fn ifn = (int_int_fn) fn;"], "whitespace/cast"]
["src/nvim/os/dl.c", ["    str_int_fn sfn = (str_int_fn) fn;", "    int_int_fn ifn = (int_int_fn) fn;", "    *int_out = argv ? sfn(argv) : ifn(argi);"], "whitespace/cast"]
