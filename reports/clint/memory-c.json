["src/nvim/memory.c", ["", " // Various routines dealing with allocation and deallocation of memory.", ""], "whitespace/indent"]
["src/nvim/memory.c", ["  // avoid recursive calls", "  if (trying_to_free)", "    return;"], "readability/braces"]
["src/nvim/memory.c", ["  void *ret = xmalloc(total_size);", "  ((char*)ret)[size] = 0;", ""], "whitespace/operators"]
["src/nvim/memory.c", ["    if (((uint8_t *)src)[len] == c) {", "      return (uint8_t *) src + len;", "    }"], "whitespace/cast"]
["src/nvim/memory.c", ["", "/*", " * Avoid repeating the error message many times (they take 1 second each)."], "readability/old_style_comment"]
["src/nvim/memory.c", ["  if (!did_outofmem_msg) {", "    /* Don't hide this message */", "    emsg_silent = 0;"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "    /* Must come first to avoid coming back here when printing the error", "     * message fails, e.g. when setting v:errmsg. */"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "/*", " * Free everything that we allocated."], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Close all tabs and windows.  Reset 'equalalways' to avoid redraws. */", "  p_ea = false;"], "readability/old_style_comment"]
["src/nvim/memory.c", ["  p_ea = false;", "  if (first_tabpage->tp_next != NULL)", "    do_cmdline_cmd(\"tabonly!\");"], "readability/braces"]
["src/nvim/memory.c", ["", "  /* Free all spell info. */", "  spell_free_all();"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Clear user commands (before deleting buffers). */", "  ex_comclear(NULL);"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Clear menus. */", "  do_cmdline_cmd(\"aunmenu *\");"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Clear mappings, abbreviations, breakpoints. */", "  do_cmdline_cmd(\"lmapclear\");"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Obviously named calls. */", "  free_all_autocmds();"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Free some global vars. */", "  xfree(last_cmdline);"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Clear cmdline history. */", "  p_hi = 0;"], "readability/old_style_comment"]
["src/nvim/memory.c", ["  qf_free_all(NULL);", "  /* Free all location lists */", "  FOR_ALL_TAB_WINDOWS(tab, win) {"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Close all script inputs. */", "  close_all_scripts();"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Destroy all windows.  Must come before freeing buffers. */", "  win_free_all();"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* Clear registers. */", "  clear_registers();"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* highlight info */", "  free_highlight();"], "readability/old_style_comment"]
["src/nvim/memory.c", ["", "  /* message history */", "  for (;; )"], "readability/old_style_comment"]
["src/nvim/memory.c", ["  /* message history */", "  for (;; )", "    if (delete_first_msg() == FAIL)"], "readability/braces"]
["src/nvim/memory.c", ["  for (;; )", "    if (delete_first_msg() == FAIL)", "      break;"], "readability/braces"]
