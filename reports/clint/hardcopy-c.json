["src/nvim/hardcopy.c", ["", "/*", " * hardcopy.c: printing to paper"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * To implement printing on a platform, the following functions must be"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  =", "  {", "  {\"top\",     TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {", "  {\"top\",     TRUE, 0, NULL, 0, FALSE},", "  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {", "  {\"top\",     TRUE, 0, NULL, 0, FALSE},", "  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {", "  {\"top\",     TRUE, 0, NULL, 0, FALSE},", "  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"top\",     TRUE, 0, NULL, 0, FALSE},", "  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},", "  {\"left\",    TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"top\",     TRUE, 0, NULL, 0, FALSE},", "  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},", "  {\"left\",    TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"top\",     TRUE, 0, NULL, 0, FALSE},", "  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},", "  {\"left\",    TRUE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},", "  {\"left\",    TRUE, 0, NULL, 0, FALSE},", "  {\"right\",   TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},", "  {\"left\",    TRUE, 0, NULL, 0, FALSE},", "  {\"right\",   TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"bottom\",  TRUE, 0, NULL, 0, FALSE},", "  {\"left\",    TRUE, 0, NULL, 0, FALSE},", "  {\"right\",   TRUE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"left\",    TRUE, 0, NULL, 0, FALSE},", "  {\"right\",   TRUE, 0, NULL, 0, FALSE},", "  {\"header\",  TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"left\",    TRUE, 0, NULL, 0, FALSE},", "  {\"right\",   TRUE, 0, NULL, 0, FALSE},", "  {\"header\",  TRUE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"left\",    TRUE, 0, NULL, 0, FALSE},", "  {\"right\",   TRUE, 0, NULL, 0, FALSE},", "  {\"header\",  TRUE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"right\",   TRUE, 0, NULL, 0, FALSE},", "  {\"header\",  TRUE, 0, NULL, 0, FALSE},", "  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"right\",   TRUE, 0, NULL, 0, FALSE},", "  {\"header\",  TRUE, 0, NULL, 0, FALSE},", "  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"right\",   TRUE, 0, NULL, 0, FALSE},", "  {\"header\",  TRUE, 0, NULL, 0, FALSE},", "  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"header\",  TRUE, 0, NULL, 0, FALSE},", "  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},", "  {\"number\",  FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"header\",  TRUE, 0, NULL, 0, FALSE},", "  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},", "  {\"number\",  FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"header\",  TRUE, 0, NULL, 0, FALSE},", "  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},", "  {\"number\",  FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},", "  {\"number\",  FALSE, 0, NULL, 0, FALSE},", "  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},", "  {\"number\",  FALSE, 0, NULL, 0, FALSE},", "  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"syntax\",  FALSE, 0, NULL, 0, FALSE},", "  {\"number\",  FALSE, 0, NULL, 0, FALSE},", "  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"number\",  FALSE, 0, NULL, 0, FALSE},", "  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},", "  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"number\",  FALSE, 0, NULL, 0, FALSE},", "  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},", "  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"number\",  FALSE, 0, NULL, 0, FALSE},", "  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},", "  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},", "  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},", "  {\"portrait\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},", "  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},", "  {\"portrait\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"wrap\",    FALSE, 0, NULL, 0, FALSE},", "  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},", "  {\"portrait\", FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},", "  {\"portrait\", FALSE, 0, NULL, 0, FALSE},", "  {\"paper\",   FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},", "  {\"portrait\", FALSE, 0, NULL, 0, FALSE},", "  {\"paper\",   FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"duplex\",  FALSE, 0, NULL, 0, FALSE},", "  {\"portrait\", FALSE, 0, NULL, 0, FALSE},", "  {\"paper\",   FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"portrait\", FALSE, 0, NULL, 0, FALSE},", "  {\"paper\",   FALSE, 0, NULL, 0, FALSE},", "  {\"collate\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"portrait\", FALSE, 0, NULL, 0, FALSE},", "  {\"paper\",   FALSE, 0, NULL, 0, FALSE},", "  {\"collate\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"portrait\", FALSE, 0, NULL, 0, FALSE},", "  {\"paper\",   FALSE, 0, NULL, 0, FALSE},", "  {\"collate\", FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"paper\",   FALSE, 0, NULL, 0, FALSE},", "  {\"collate\", FALSE, 0, NULL, 0, FALSE},", "  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"paper\",   FALSE, 0, NULL, 0, FALSE},", "  {\"collate\", FALSE, 0, NULL, 0, FALSE},", "  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"paper\",   FALSE, 0, NULL, 0, FALSE},", "  {\"collate\", FALSE, 0, NULL, 0, FALSE},", "  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"collate\", FALSE, 0, NULL, 0, FALSE},", "  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},", "  {\"formfeed\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"collate\", FALSE, 0, NULL, 0, FALSE},", "  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},", "  {\"formfeed\", FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"collate\", FALSE, 0, NULL, 0, FALSE},", "  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},", "  {\"formfeed\", FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},", "  {\"formfeed\", FALSE, 0, NULL, 0, FALSE},", "  }"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},", "  {\"formfeed\", FALSE, 0, NULL, 0, FALSE},", "  }"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"jobsplit\", FALSE, 0, NULL, 0, FALSE},", "  {\"formfeed\", FALSE, 0, NULL, 0, FALSE},", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  }", ";", ""], "whitespace/semicolon"]
["src/nvim/hardcopy.c", ["{", "  {\"c\",       FALSE, 0, NULL, 0, FALSE},", "  {\"a\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"c\",       FALSE, 0, NULL, 0, FALSE},", "  {\"a\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"c\",       FALSE, 0, NULL, 0, FALSE},", "  {\"a\",       FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"c\",       FALSE, 0, NULL, 0, FALSE},", "  {\"a\",       FALSE, 0, NULL, 0, FALSE},", "  {\"r\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"c\",       FALSE, 0, NULL, 0, FALSE},", "  {\"a\",       FALSE, 0, NULL, 0, FALSE},", "  {\"r\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"c\",       FALSE, 0, NULL, 0, FALSE},", "  {\"a\",       FALSE, 0, NULL, 0, FALSE},", "  {\"r\",       FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"a\",       FALSE, 0, NULL, 0, FALSE},", "  {\"r\",       FALSE, 0, NULL, 0, FALSE},", "  {\"b\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"a\",       FALSE, 0, NULL, 0, FALSE},", "  {\"r\",       FALSE, 0, NULL, 0, FALSE},", "  {\"b\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"a\",       FALSE, 0, NULL, 0, FALSE},", "  {\"r\",       FALSE, 0, NULL, 0, FALSE},", "  {\"b\",       FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"r\",       FALSE, 0, NULL, 0, FALSE},", "  {\"b\",       FALSE, 0, NULL, 0, FALSE},", "  {\"i\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"r\",       FALSE, 0, NULL, 0, FALSE},", "  {\"b\",       FALSE, 0, NULL, 0, FALSE},", "  {\"i\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"r\",       FALSE, 0, NULL, 0, FALSE},", "  {\"b\",       FALSE, 0, NULL, 0, FALSE},", "  {\"i\",       FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"b\",       FALSE, 0, NULL, 0, FALSE},", "  {\"i\",       FALSE, 0, NULL, 0, FALSE},", "  {\"o\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"b\",       FALSE, 0, NULL, 0, FALSE},", "  {\"i\",       FALSE, 0, NULL, 0, FALSE},", "  {\"o\",       FALSE, 0, NULL, 0, FALSE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"b\",       FALSE, 0, NULL, 0, FALSE},", "  {\"i\",       FALSE, 0, NULL, 0, FALSE},", "  {\"o\",       FALSE, 0, NULL, 0, FALSE},"], "readability/bool"]
["src/nvim/hardcopy.c", ["  {\"i\",       FALSE, 0, NULL, 0, FALSE},", "  {\"o\",       FALSE, 0, NULL, 0, FALSE},", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"i\",       FALSE, 0, NULL, 0, FALSE},", "  {\"o\",       FALSE, 0, NULL, 0, FALSE},", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"i\",       FALSE, 0, NULL, 0, FALSE},", "  {\"o\",       FALSE, 0, NULL, 0, FALSE},", "};"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "/*", " * These values determine the print position on a page."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Structures to map user named encoding and mapping to PS equivalents for", " * building CID font name */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Static buffer to read initial comments in a resource file, some can have a", " * couple of KB of comments! */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Parse 'printoptions' and set the flags in \"printer_opts\"."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Parse 'printoptions' and set the flags in \"printer_opts\"."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Parse a list of options in the form"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Repeat for all comma separated parts."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    commap = vim_strchr(stringp, ',');", "    if (commap == NULL)", "      commap = option_str + STRLEN(option_str);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "    for (idx = 0; idx < table_size; ++idx)", "      if (STRNICMP(stringp, table[idx].name, len) == 0)"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "    for (idx = 0; idx < table_size; ++idx)", "      if (STRNICMP(stringp, table[idx].name, len) == 0)"], "readability/increment"]
["src/nvim/hardcopy.c", ["    for (idx = 0; idx < table_size; ++idx)", "      if (STRNICMP(stringp, table[idx].name, len) == 0)", "        break;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    p = colonp + 1;", "    table[idx].present = TRUE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["    stringp = commap;", "    if (*stringp == ',')", "      ++stringp;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    if (*stringp == ',')", "      ++stringp;", "  }"], "readability/increment"]
["src/nvim/hardcopy.c", ["", "/*", " * If using a dark background, the colors will probably be too bright to show"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "    if (colorindex >= 0 && colorindex < t_colors)", "      fg_color = prt_get_term_color(colorindex);"], "readability/braces"]
["src/nvim/hardcopy.c", ["      fg_color = prt_get_term_color(colorindex);", "    else", "      fg_color = PRCOLOR_BLACK;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  if (fg_color == PRCOLOR_WHITE)", "    fg_color = PRCOLOR_BLACK;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    fg_color = PRCOLOR_BLACK;", "  else if (*p_bg == 'd')", "    fg_color = darken_rgb(fg_color);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "/*", " * Get the currently effective header height."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Return TRUE if using a line number for printing."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Return the unit used in a margin item in 'printoptions'."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  if (printer_opts[idx].present)", "    for (i = 0; i < 4; ++i)"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (printer_opts[idx].present)", "    for (i = 0; i < 4; ++i)", "      if (STRNICMP(printer_opts[idx].string, units[i], 2) == 0) {"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (printer_opts[idx].present)", "    for (i = 0; i < 4; ++i)", "      if (STRNICMP(printer_opts[idx].string, units[i], 2) == 0) {"], "readability/increment"]
["src/nvim/hardcopy.c", ["    linenr_T tmp_lnum, tmp_topline, tmp_botline;", "    int use_sandbox = FALSE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["", "    /*", "     * Need to (temporarily) set current line number and first/last line"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    build_stl_str_hl(curwin, tbuf, (size_t)width + IOSIZE,", "        p_header, use_sandbox,", "        ' ', width, NULL, NULL);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["        p_header, use_sandbox,", "        ' ', width, NULL, NULL);", ""], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "/*", " * Display a print status message."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  memset(&settings, 0, sizeof(prt_settings_T));", "  settings.has_color = TRUE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["    if (expand_filename(eap, eap->cmdlinep, &errormsg) == FAIL) {", "      if (errormsg != NULL)", "        EMSG(errormsg);"], "readability/braces"]
["src/nvim/hardcopy.c", ["    settings.outfile = skipwhite(eap->arg + 1);", "  } else if (*eap->arg != NUL)", "    settings.arguments = eap->arg;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Initialise for printing.  Ask the user for settings, unless forceit is"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["   */", "  if (mch_print_init(&settings,", "          curbuf->b_fname == NULL"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (mch_print_init(&settings,", "          curbuf->b_fname == NULL", "          ? (char_u *)buf_spname(curbuf)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          curbuf->b_fname == NULL", "          ? (char_u *)buf_spname(curbuf)", "          : curbuf->b_sfname == NULL"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          ? (char_u *)buf_spname(curbuf)", "          : curbuf->b_sfname == NULL", "          ? curbuf->b_fname"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          : curbuf->b_sfname == NULL", "          ? curbuf->b_fname", "          : curbuf->b_sfname,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          ? curbuf->b_fname", "          : curbuf->b_sfname,", "          eap->forceit) == FAIL)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          : curbuf->b_sfname,", "          eap->forceit) == FAIL)", "    return;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "  if (!syntax_present(curwin))", "    settings.do_syntax = FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (!syntax_present(curwin))", "    settings.do_syntax = FALSE;", "  else if (printer_opts[OPT_PRINT_SYNTAX].present"], "readability/bool"]
["src/nvim/hardcopy.c", ["    settings.do_syntax = FALSE;", "  else if (printer_opts[OPT_PRINT_SYNTAX].present", "           && TOLOWER_ASC(printer_opts[OPT_PRINT_SYNTAX].string[0]) != 'a')"], "readability/braces"]
["src/nvim/hardcopy.c", ["      (TOLOWER_ASC(printer_opts[OPT_PRINT_SYNTAX].string[0]) == 'y');", "  else", "    settings.do_syntax = settings.has_color;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Estimate the total lines to be printed"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["   */", "  for (lnum = eap->line1; lnum <= eap->line2; lnum++)", "    bytes_to_print += STRLEN(skipwhite(ml_get(lnum)));"], "readability/braces"]
["src/nvim/hardcopy.c", ["  jobsplit = (printer_opts[OPT_PRINT_JOBSPLIT].present", "              && TOLOWER_ASC(printer_opts[OPT_PRINT_JOBSPLIT].string[0]) == 'y');", ""], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["", "  if (!mch_print_begin(&settings))", "    goto print_fail_no_begin;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Loop over collated copies: 1 2 3, 1 2 3, ..."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["      mch_print_end(&settings);", "      if (!mch_print_begin(&settings))", "        goto print_fail_no_begin;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "    /*", "     * Loop over all pages in the print job: 1 2 3 ..."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["     */", "    for (page_count = 0; prtpos.file_line <= eap->line2; ++page_count) {", "      /*"], "readability/increment"]
["src/nvim/hardcopy.c", ["    for (page_count = 0; prtpos.file_line <= eap->line2; ++page_count) {", "      /*", "       * Loop over uncollated copies: 1 1 1, 2 2 2, 3 3 3, ..."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "        /*", "         * Do front and rear side of a page."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["         */", "        for (side = 0; side <= settings.duplex; ++side) {", "          /*"], "readability/increment"]
["src/nvim/hardcopy.c", ["        for (side = 0; side <= settings.duplex; ++side) {", "          /*", "           * Print one page."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["          os_breakcheck();", "          if (got_int || settings.user_abort)", "            goto print_fail;"], "readability/braces"]
["src/nvim/hardcopy.c", ["          assert(prtpos.bytes_printed <= SIZE_MAX / 100);", "          sprintf((char *)IObuff, _(\"Printing page %d (%zu%%)\"),", "                  page_count + 1 + side,"], "runtime/printf"]
["src/nvim/hardcopy.c", ["                  prtpos.bytes_printed * 100 / bytes_to_print);", "          if (!mch_print_begin_page(IObuff))", "            goto print_fail;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "          if (settings.n_collated_copies > 1)", "            sprintf((char *)IObuff + STRLEN(IObuff),"], "readability/braces"]
["src/nvim/hardcopy.c", ["            sprintf((char *)IObuff + STRLEN(IObuff),", "                _(\" Copy %d of %d\"),", "                collated_copies + 1,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["                _(\" Copy %d of %d\"),", "                collated_copies + 1,", "                settings.n_collated_copies);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["                collated_copies + 1,", "                settings.n_collated_copies);", "          prt_message(IObuff);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          if (settings.n_collated_copies > 1)", "            sprintf((char *)IObuff + STRLEN(IObuff),", "                _(\" Copy %d of %d\"),"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "          /*", "           * Output header if required"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["           */", "          if (prt_header_height() > 0)", "            prt_header(&settings, page_count + 1 + side,"], "readability/braces"]
["src/nvim/hardcopy.c", ["            prt_header(&settings, page_count + 1 + side,", "                prtpos.file_line);", ""], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          for (page_line = 0; page_line < settings.lines_per_page;", "               ++page_line) {", "            prtpos.column = hardcopy_line(&settings,"], "readability/increment"]
["src/nvim/hardcopy.c", ["            prtpos.column = hardcopy_line(&settings,", "                page_line, &prtpos);", "            if (prtpos.column == 0) {"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["            } else if (prtpos.ff) {", "              /* Line had a formfeed in it - start new page but", "               * stay on the current line */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "        /*", "         * Extra blank page for duplexing with odd number of pages and"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["            && uncollated_copies + 1 < settings.n_uncollated_copies) {", "          if (!mch_print_blank_page())", "            goto print_fail;"], "readability/braces"]
["src/nvim/hardcopy.c", ["      }", "      if (settings.duplex && prtpos.file_line <= eap->line2)", "        ++page_count;"], "readability/braces"]
["src/nvim/hardcopy.c", ["      if (settings.duplex && prtpos.file_line <= eap->line2)", "        ++page_count;", ""], "readability/increment"]
["src/nvim/hardcopy.c", ["    vim_snprintf((char *)IObuff, IOSIZE, _(\"Printed: %s\"),", "        settings.jobname);", "    prt_message(IObuff);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  if (got_int || settings.user_abort) {", "    sprintf((char *)IObuff, \"%s\", _(\"Printing aborted\"));", "    prt_message(IObuff);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "/*", " * Print one page line."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", [" */", "static colnr_T hardcopy_line(prt_settings_T *psettings, int page_line, prt_pos_T *ppos)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["  char_u      *line;", "  int need_break = FALSE;", "  int outputlen;"], "readability/bool"]
["src/nvim/hardcopy.c", ["    tab_spaces = 0;", "    if (!ppos->ff && prt_use_number())", "      prt_line_number(psettings, page_line, ppos->file_line);"], "readability/braces"]
["src/nvim/hardcopy.c", ["      prt_line_number(psettings, page_line, ppos->file_line);", "    ppos->ff = FALSE;", "  } else {"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Loop over the columns until the end of the file line or right margin."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    if (psettings->do_syntax) {", "      id = syn_get_id(curwin, ppos->file_line, col, 1, NULL, FALSE);", "      if (id > 0)"], "readability/bool"]
["src/nvim/hardcopy.c", ["      id = syn_get_id(curwin, ppos->file_line, col, 1, NULL, FALSE);", "      if (id > 0)", "        id = syn_get_final_id(id);"], "readability/braces"]
["src/nvim/hardcopy.c", ["        id = syn_get_final_id(id);", "      else", "        id = 0;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "    /*", "     * Appropriately expand any tabs to spaces."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["        tab_spaces--;", "        if (need_break)", "          break;"], "readability/braces"]
["src/nvim/hardcopy.c", ["               == 'y') {", "      ppos->ff = TRUE;", "      need_break = 1;"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Start next line of file if we clip lines, or have reached end of the"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["   */", "  if (!ppos->ff", "      && (line[col] == NUL"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "/*", " * PS printer stuff."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  -250, 805,", "  {\"Courier\", \"Courier-Bold\", \"Courier-Oblique\", \"Courier-BoldOblique\"}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  -250, 805,", "  {\"Courier\", \"Courier-Bold\", \"Courier-Oblique\", \"Courier-BoldOblique\"}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  -250, 805,", "  {NULL, NULL, NULL, NULL}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  -250, 805,", "  {NULL, NULL, NULL, NULL}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022-jp\", NULL,       (CS_JIS_C_1978|CS_JIS_X_1983|CS_JIS_X_1990|", "                               CS_NEC)},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022-jp\", NULL,       (CS_JIS_C_1978|CS_JIS_X_1983|CS_JIS_X_1990|", "                               CS_NEC)},", "  {\"euc-jp\",      \"EUC\",      (CS_JIS_C_1978|CS_JIS_X_1983|CS_JIS_X_1990)},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_NEC)},", "  {\"euc-jp\",      \"EUC\",      (CS_JIS_C_1978|CS_JIS_X_1983|CS_JIS_X_1990)},", "  {\"sjis\",        \"RKSJ\",     (CS_JIS_C_1978|CS_JIS_X_1983|CS_MSWINDOWS|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_NEC)},", "  {\"euc-jp\",      \"EUC\",      (CS_JIS_C_1978|CS_JIS_X_1983|CS_JIS_X_1990)},", "  {\"sjis\",        \"RKSJ\",     (CS_JIS_C_1978|CS_JIS_X_1983|CS_MSWINDOWS|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"euc-jp\",      \"EUC\",      (CS_JIS_C_1978|CS_JIS_X_1983|CS_JIS_X_1990)},", "  {\"sjis\",        \"RKSJ\",     (CS_JIS_C_1978|CS_JIS_X_1983|CS_MSWINDOWS|", "                               CS_KANJITALK6|CS_KANJITALK7)},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"sjis\",        \"RKSJ\",     (CS_JIS_C_1978|CS_JIS_X_1983|CS_MSWINDOWS|", "                               CS_KANJITALK6|CS_KANJITALK7)},", "  {\"cp932\",       \"RKSJ\",     CS_JIS_X_1983},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_KANJITALK6|CS_KANJITALK7)},", "  {\"cp932\",       \"RKSJ\",     CS_JIS_X_1983},", "  {\"ucs-2\",       \"UCS2\",     CS_JIS_X_1990},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_KANJITALK6|CS_KANJITALK7)},", "  {\"cp932\",       \"RKSJ\",     CS_JIS_X_1983},", "  {\"ucs-2\",       \"UCS2\",     CS_JIS_X_1990},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp932\",       \"RKSJ\",     CS_JIS_X_1983},", "  {\"ucs-2\",       \"UCS2\",     CS_JIS_X_1990},", "  {\"utf-8\",       \"UTF8\",    CS_JIS_X_1990}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp932\",       \"RKSJ\",     CS_JIS_X_1983},", "  {\"ucs-2\",       \"UCS2\",     CS_JIS_X_1990},", "  {\"utf-8\",       \"UTF8\",    CS_JIS_X_1990}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_JIS_X_1990},", "  {\"utf-8\",       \"UTF8\",    CS_JIS_X_1990}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_JIS_X_1990},", "  {\"utf-8\",       \"UTF8\",    CS_JIS_X_1990}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"JIS_C_1978\",  \"78\",       CS_JIS_C_1978},", "  {\"JIS_X_1983\",  NULL,       CS_JIS_X_1983},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"JIS_C_1978\",  \"78\",       CS_JIS_C_1978},", "  {\"JIS_X_1983\",  NULL,       CS_JIS_X_1983},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"JIS_C_1978\",  \"78\",       CS_JIS_C_1978},", "  {\"JIS_X_1983\",  NULL,       CS_JIS_X_1983},", "  {\"JIS_X_1990\",  \"Hojo\",     CS_JIS_X_1990},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"JIS_C_1978\",  \"78\",       CS_JIS_C_1978},", "  {\"JIS_X_1983\",  NULL,       CS_JIS_X_1983},", "  {\"JIS_X_1990\",  \"Hojo\",     CS_JIS_X_1990},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"JIS_X_1983\",  NULL,       CS_JIS_X_1983},", "  {\"JIS_X_1990\",  \"Hojo\",     CS_JIS_X_1990},", "  {\"NEC\",         \"Ext\",      CS_NEC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"JIS_X_1983\",  NULL,       CS_JIS_X_1983},", "  {\"JIS_X_1990\",  \"Hojo\",     CS_JIS_X_1990},", "  {\"NEC\",         \"Ext\",      CS_NEC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"JIS_X_1990\",  \"Hojo\",     CS_JIS_X_1990},", "  {\"NEC\",         \"Ext\",      CS_NEC},", "  {\"MSWINDOWS\",   \"90ms\",     CS_MSWINDOWS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"JIS_X_1990\",  \"Hojo\",     CS_JIS_X_1990},", "  {\"NEC\",         \"Ext\",      CS_NEC},", "  {\"MSWINDOWS\",   \"90ms\",     CS_MSWINDOWS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"NEC\",         \"Ext\",      CS_NEC},", "  {\"MSWINDOWS\",   \"90ms\",     CS_MSWINDOWS},", "  {\"CP932\",       \"90ms\",     CS_JIS_X_1983},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"NEC\",         \"Ext\",      CS_NEC},", "  {\"MSWINDOWS\",   \"90ms\",     CS_MSWINDOWS},", "  {\"CP932\",       \"90ms\",     CS_JIS_X_1983},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MSWINDOWS\",   \"90ms\",     CS_MSWINDOWS},", "  {\"CP932\",       \"90ms\",     CS_JIS_X_1983},", "  {\"KANJITALK6\",  \"83pv\",     CS_KANJITALK6},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MSWINDOWS\",   \"90ms\",     CS_MSWINDOWS},", "  {\"CP932\",       \"90ms\",     CS_JIS_X_1983},", "  {\"KANJITALK6\",  \"83pv\",     CS_KANJITALK6},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP932\",       \"90ms\",     CS_JIS_X_1983},", "  {\"KANJITALK6\",  \"83pv\",     CS_KANJITALK6},", "  {\"KANJITALK7\",  \"90pv\",     CS_KANJITALK7}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP932\",       \"90ms\",     CS_JIS_X_1983},", "  {\"KANJITALK6\",  \"83pv\",     CS_KANJITALK6},", "  {\"KANJITALK7\",  \"90pv\",     CS_KANJITALK7}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"KANJITALK6\",  \"83pv\",     CS_KANJITALK6},", "  {\"KANJITALK7\",  \"90pv\",     CS_KANJITALK7}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"KANJITALK6\",  \"83pv\",     CS_KANJITALK6},", "  {\"KANJITALK7\",  \"90pv\",     CS_KANJITALK7}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022\",    NULL,       (CS_GB_2312_80|CS_GBT_12345_90)},", "  {\"gb18030\",     NULL,       CS_GBK2K},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022\",    NULL,       (CS_GB_2312_80|CS_GBT_12345_90)},", "  {\"gb18030\",     NULL,       CS_GBK2K},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022\",    NULL,       (CS_GB_2312_80|CS_GBT_12345_90)},", "  {\"gb18030\",     NULL,       CS_GBK2K},", "  {\"euc-cn\",      \"EUC\",      (CS_GB_2312_80|CS_GBT_12345_90|CS_SC_MAC|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022\",    NULL,       (CS_GB_2312_80|CS_GBT_12345_90)},", "  {\"gb18030\",     NULL,       CS_GBK2K},", "  {\"euc-cn\",      \"EUC\",      (CS_GB_2312_80|CS_GBT_12345_90|CS_SC_MAC|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"gb18030\",     NULL,       CS_GBK2K},", "  {\"euc-cn\",      \"EUC\",      (CS_GB_2312_80|CS_GBT_12345_90|CS_SC_MAC|", "                               CS_GBT_90_MAC)},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"euc-cn\",      \"EUC\",      (CS_GB_2312_80|CS_GBT_12345_90|CS_SC_MAC|", "                               CS_GBT_90_MAC)},", "  {\"gbk\",         \"EUC\",      CS_GBK},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_GBT_90_MAC)},", "  {\"gbk\",         \"EUC\",      CS_GBK},", "  {\"ucs-2\",       \"UCS2\",     CS_SC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_GBT_90_MAC)},", "  {\"gbk\",         \"EUC\",      CS_GBK},", "  {\"ucs-2\",       \"UCS2\",     CS_SC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"gbk\",         \"EUC\",      CS_GBK},", "  {\"ucs-2\",       \"UCS2\",     CS_SC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_SC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"gbk\",         \"EUC\",      CS_GBK},", "  {\"ucs-2\",       \"UCS2\",     CS_SC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_SC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_SC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_SC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_SC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_SC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"GB_2312-80\",  \"GB\",       CS_GB_2312_80},", "  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"GB_2312-80\",  \"GB\",       CS_GB_2312_80},", "  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GB_2312-80\",  \"GB\",       CS_GB_2312_80},", "  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},", "  {\"MAC\",         \"GBpc\",     CS_SC_MAC},"], "whitespace/comma"]
["src/nvim/hardcopy.c", ["  {\"GB_2312-80\",  \"GB\",       CS_GB_2312_80},", "  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},", "  {\"MAC\",         \"GBpc\",     CS_SC_MAC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GB_2312-80\",  \"GB\",       CS_GB_2312_80},", "  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},", "  {\"MAC\",         \"GBpc\",     CS_SC_MAC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},", "  {\"MAC\",         \"GBpc\",     CS_SC_MAC},", "  {\"GBT-90_MAC\",  \"GBTpc\",    CS_GBT_90_MAC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GBT_12345-90\",\"GBT\",      CS_GBT_12345_90},", "  {\"MAC\",         \"GBpc\",     CS_SC_MAC},", "  {\"GBT-90_MAC\",  \"GBTpc\",    CS_GBT_90_MAC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MAC\",         \"GBpc\",     CS_SC_MAC},", "  {\"GBT-90_MAC\",  \"GBTpc\",    CS_GBT_90_MAC},", "  {\"GBK\",         \"GBK\",      CS_GBK},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MAC\",         \"GBpc\",     CS_SC_MAC},", "  {\"GBT-90_MAC\",  \"GBTpc\",    CS_GBT_90_MAC},", "  {\"GBK\",         \"GBK\",      CS_GBK},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GBT-90_MAC\",  \"GBTpc\",    CS_GBT_90_MAC},", "  {\"GBK\",         \"GBK\",      CS_GBK},", "  {\"GB18030\",     \"GBK2K\",    CS_GBK2K},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GBT-90_MAC\",  \"GBTpc\",    CS_GBT_90_MAC},", "  {\"GBK\",         \"GBK\",      CS_GBK},", "  {\"GB18030\",     \"GBK2K\",    CS_GBK2K},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GBK\",         \"GBK\",      CS_GBK},", "  {\"GB18030\",     \"GBK2K\",    CS_GBK2K},", "  {\"ISO10646\",    \"UniGB\",    CS_SC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GBK\",         \"GBK\",      CS_GBK},", "  {\"GB18030\",     \"GBK2K\",    CS_GBK2K},", "  {\"ISO10646\",    \"UniGB\",    CS_SC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GB18030\",     \"GBK2K\",    CS_GBK2K},", "  {\"ISO10646\",    \"UniGB\",    CS_SC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"GB18030\",     \"GBK2K\",    CS_GBK2K},", "  {\"ISO10646\",    \"UniGB\",    CS_SC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022\",    NULL,       (CS_CNS_PLANE_1|CS_CNS_PLANE_2)},", "  {\"euc-tw\",      \"EUC\",      CS_CNS_PLANE_1_2},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022\",    NULL,       (CS_CNS_PLANE_1|CS_CNS_PLANE_2)},", "  {\"euc-tw\",      \"EUC\",      CS_CNS_PLANE_1_2},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022\",    NULL,       (CS_CNS_PLANE_1|CS_CNS_PLANE_2)},", "  {\"euc-tw\",      \"EUC\",      CS_CNS_PLANE_1_2},", "  {\"big5\",        \"B5\",       (CS_B5|CS_ETEN|CS_HK_GCCS|CS_HK_SCS|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022\",    NULL,       (CS_CNS_PLANE_1|CS_CNS_PLANE_2)},", "  {\"euc-tw\",      \"EUC\",      CS_CNS_PLANE_1_2},", "  {\"big5\",        \"B5\",       (CS_B5|CS_ETEN|CS_HK_GCCS|CS_HK_SCS|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"euc-tw\",      \"EUC\",      CS_CNS_PLANE_1_2},", "  {\"big5\",        \"B5\",       (CS_B5|CS_ETEN|CS_HK_GCCS|CS_HK_SCS|", "                               CS_HK_SCS_ETEN|CS_MTHKL|CS_MTHKS|CS_DLHKL|"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_HK_SCS_ETEN|CS_MTHKL|CS_MTHKS|CS_DLHKL|", "                               CS_DLHKS)},", "  {\"cp950\",       \"B5\",       CS_B5},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_DLHKS)},", "  {\"cp950\",       \"B5\",       CS_B5},", "  {\"ucs-2\",       \"UCS2\",     CS_TC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["                               CS_DLHKS)},", "  {\"cp950\",       \"B5\",       CS_B5},", "  {\"ucs-2\",       \"UCS2\",     CS_TC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp950\",       \"B5\",       CS_B5},", "  {\"ucs-2\",       \"UCS2\",     CS_TC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_TC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp950\",       \"B5\",       CS_B5},", "  {\"ucs-2\",       \"UCS2\",     CS_TC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_TC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_TC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_TC_ISO10646},", "  {\"utf-16\",      \"UTF16\",    CS_TC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_TC_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_TC_ISO10646},", "  {\"utf-16\",      \"UTF16\",    CS_TC_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"utf-8\",       \"UTF8\",     CS_TC_ISO10646},", "  {\"utf-16\",      \"UTF16\",    CS_TC_ISO10646},", "  {\"utf-32\",      \"UTF32\",    CS_TC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"utf-8\",       \"UTF8\",     CS_TC_ISO10646},", "  {\"utf-16\",      \"UTF16\",    CS_TC_ISO10646},", "  {\"utf-32\",      \"UTF32\",    CS_TC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"utf-16\",      \"UTF16\",    CS_TC_ISO10646},", "  {\"utf-32\",      \"UTF32\",    CS_TC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"utf-16\",      \"UTF16\",    CS_TC_ISO10646},", "  {\"utf-32\",      \"UTF32\",    CS_TC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"CNS_1992_1\",  \"CNS1\",     CS_CNS_PLANE_1},", "  {\"CNS_1992_2\",  \"CNS2\",     CS_CNS_PLANE_2},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"CNS_1992_1\",  \"CNS1\",     CS_CNS_PLANE_1},", "  {\"CNS_1992_2\",  \"CNS2\",     CS_CNS_PLANE_2},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CNS_1992_1\",  \"CNS1\",     CS_CNS_PLANE_1},", "  {\"CNS_1992_2\",  \"CNS2\",     CS_CNS_PLANE_2},", "  {\"CNS_1993\",    \"CNS\",      CS_CNS_PLANE_1_2},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CNS_1992_1\",  \"CNS1\",     CS_CNS_PLANE_1},", "  {\"CNS_1992_2\",  \"CNS2\",     CS_CNS_PLANE_2},", "  {\"CNS_1993\",    \"CNS\",      CS_CNS_PLANE_1_2},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CNS_1992_2\",  \"CNS2\",     CS_CNS_PLANE_2},", "  {\"CNS_1993\",    \"CNS\",      CS_CNS_PLANE_1_2},", "  {\"BIG5\",        NULL,       CS_B5},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CNS_1992_2\",  \"CNS2\",     CS_CNS_PLANE_2},", "  {\"CNS_1993\",    \"CNS\",      CS_CNS_PLANE_1_2},", "  {\"BIG5\",        NULL,       CS_B5},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CNS_1993\",    \"CNS\",      CS_CNS_PLANE_1_2},", "  {\"BIG5\",        NULL,       CS_B5},", "  {\"CP950\",       NULL,       CS_B5},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CNS_1993\",    \"CNS\",      CS_CNS_PLANE_1_2},", "  {\"BIG5\",        NULL,       CS_B5},", "  {\"CP950\",       NULL,       CS_B5},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"BIG5\",        NULL,       CS_B5},", "  {\"CP950\",       NULL,       CS_B5},", "  {\"ETEN\",        \"ETen\",     CS_ETEN},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"BIG5\",        NULL,       CS_B5},", "  {\"CP950\",       NULL,       CS_B5},", "  {\"ETEN\",        \"ETen\",     CS_ETEN},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP950\",       NULL,       CS_B5},", "  {\"ETEN\",        \"ETen\",     CS_ETEN},", "  {\"HK_GCCS\",     \"HKgccs\",   CS_HK_GCCS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP950\",       NULL,       CS_B5},", "  {\"ETEN\",        \"ETen\",     CS_ETEN},", "  {\"HK_GCCS\",     \"HKgccs\",   CS_HK_GCCS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ETEN\",        \"ETen\",     CS_ETEN},", "  {\"HK_GCCS\",     \"HKgccs\",   CS_HK_GCCS},", "  {\"SCS\",         \"HKscs\",    CS_HK_SCS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ETEN\",        \"ETen\",     CS_ETEN},", "  {\"HK_GCCS\",     \"HKgccs\",   CS_HK_GCCS},", "  {\"SCS\",         \"HKscs\",    CS_HK_SCS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"HK_GCCS\",     \"HKgccs\",   CS_HK_GCCS},", "  {\"SCS\",         \"HKscs\",    CS_HK_SCS},", "  {\"SCS_ETEN\",    \"ETHK\",     CS_HK_SCS_ETEN},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"HK_GCCS\",     \"HKgccs\",   CS_HK_GCCS},", "  {\"SCS\",         \"HKscs\",    CS_HK_SCS},", "  {\"SCS_ETEN\",    \"ETHK\",     CS_HK_SCS_ETEN},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"SCS\",         \"HKscs\",    CS_HK_SCS},", "  {\"SCS_ETEN\",    \"ETHK\",     CS_HK_SCS_ETEN},", "  {\"MTHKL\",       \"HKm471\",   CS_MTHKL},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"SCS\",         \"HKscs\",    CS_HK_SCS},", "  {\"SCS_ETEN\",    \"ETHK\",     CS_HK_SCS_ETEN},", "  {\"MTHKL\",       \"HKm471\",   CS_MTHKL},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"SCS_ETEN\",    \"ETHK\",     CS_HK_SCS_ETEN},", "  {\"MTHKL\",       \"HKm471\",   CS_MTHKL},", "  {\"MTHKS\",       \"HKm314\",   CS_MTHKS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"SCS_ETEN\",    \"ETHK\",     CS_HK_SCS_ETEN},", "  {\"MTHKL\",       \"HKm471\",   CS_MTHKL},", "  {\"MTHKS\",       \"HKm314\",   CS_MTHKS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MTHKL\",       \"HKm471\",   CS_MTHKL},", "  {\"MTHKS\",       \"HKm314\",   CS_MTHKS},", "  {\"DLHKL\",       \"HKdla\",    CS_DLHKL},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MTHKL\",       \"HKm471\",   CS_MTHKL},", "  {\"MTHKS\",       \"HKm314\",   CS_MTHKS},", "  {\"DLHKL\",       \"HKdla\",    CS_DLHKL},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MTHKS\",       \"HKm314\",   CS_MTHKS},", "  {\"DLHKL\",       \"HKdla\",    CS_DLHKL},", "  {\"DLHKS\",       \"HKdlb\",    CS_DLHKS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MTHKS\",       \"HKm314\",   CS_MTHKS},", "  {\"DLHKL\",       \"HKdla\",    CS_DLHKL},", "  {\"DLHKS\",       \"HKdlb\",    CS_DLHKS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"DLHKL\",       \"HKdla\",    CS_DLHKL},", "  {\"DLHKS\",       \"HKdlb\",    CS_DLHKS},", "  {\"ISO10646\",    \"UniCNS\",   CS_TC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"DLHKL\",       \"HKdla\",    CS_DLHKL},", "  {\"DLHKS\",       \"HKdlb\",    CS_DLHKS},", "  {\"ISO10646\",    \"UniCNS\",   CS_TC_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"DLHKS\",       \"HKdlb\",    CS_DLHKS},", "  {\"ISO10646\",    \"UniCNS\",   CS_TC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"DLHKS\",       \"HKdlb\",    CS_DLHKS},", "  {\"ISO10646\",    \"UniCNS\",   CS_TC_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022-kr\", NULL,       CS_KR_X_1992},", "  {\"euc-kr\",      \"EUC\",      (CS_KR_X_1992|CS_KR_MAC)},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"iso-2022-kr\", NULL,       CS_KR_X_1992},", "  {\"euc-kr\",      \"EUC\",      (CS_KR_X_1992|CS_KR_MAC)},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022-kr\", NULL,       CS_KR_X_1992},", "  {\"euc-kr\",      \"EUC\",      (CS_KR_X_1992|CS_KR_MAC)},", "  {\"johab\",       \"Johab\",    CS_KR_X_1992},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"iso-2022-kr\", NULL,       CS_KR_X_1992},", "  {\"euc-kr\",      \"EUC\",      (CS_KR_X_1992|CS_KR_MAC)},", "  {\"johab\",       \"Johab\",    CS_KR_X_1992},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"euc-kr\",      \"EUC\",      (CS_KR_X_1992|CS_KR_MAC)},", "  {\"johab\",       \"Johab\",    CS_KR_X_1992},", "  {\"cp1361\",      \"Johab\",    CS_KR_X_1992},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"euc-kr\",      \"EUC\",      (CS_KR_X_1992|CS_KR_MAC)},", "  {\"johab\",       \"Johab\",    CS_KR_X_1992},", "  {\"cp1361\",      \"Johab\",    CS_KR_X_1992},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"johab\",       \"Johab\",    CS_KR_X_1992},", "  {\"cp1361\",      \"Johab\",    CS_KR_X_1992},", "  {\"uhc\",         \"UHC\",      CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"johab\",       \"Johab\",    CS_KR_X_1992},", "  {\"cp1361\",      \"Johab\",    CS_KR_X_1992},", "  {\"uhc\",         \"UHC\",      CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp1361\",      \"Johab\",    CS_KR_X_1992},", "  {\"uhc\",         \"UHC\",      CS_KR_X_1992_MS},", "  {\"cp949\",       \"UHC\",      CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp1361\",      \"Johab\",    CS_KR_X_1992},", "  {\"uhc\",         \"UHC\",      CS_KR_X_1992_MS},", "  {\"cp949\",       \"UHC\",      CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"uhc\",         \"UHC\",      CS_KR_X_1992_MS},", "  {\"cp949\",       \"UHC\",      CS_KR_X_1992_MS},", "  {\"ucs-2\",       \"UCS2\",     CS_KR_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"uhc\",         \"UHC\",      CS_KR_X_1992_MS},", "  {\"cp949\",       \"UHC\",      CS_KR_X_1992_MS},", "  {\"ucs-2\",       \"UCS2\",     CS_KR_ISO10646},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp949\",       \"UHC\",      CS_KR_X_1992_MS},", "  {\"ucs-2\",       \"UCS2\",     CS_KR_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_KR_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"cp949\",       \"UHC\",      CS_KR_X_1992_MS},", "  {\"ucs-2\",       \"UCS2\",     CS_KR_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_KR_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_KR_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_KR_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"ucs-2\",       \"UCS2\",     CS_KR_ISO10646},", "  {\"utf-8\",       \"UTF8\",     CS_KR_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"KS_X_1992\",   \"KSC\",      CS_KR_X_1992},", "  {\"CP1361\",      \"KSC\",      CS_KR_X_1992},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {\"KS_X_1992\",   \"KSC\",      CS_KR_X_1992},", "  {\"CP1361\",      \"KSC\",      CS_KR_X_1992},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"KS_X_1992\",   \"KSC\",      CS_KR_X_1992},", "  {\"CP1361\",      \"KSC\",      CS_KR_X_1992},", "  {\"MAC\",         \"KSCpc\",    CS_KR_MAC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"KS_X_1992\",   \"KSC\",      CS_KR_X_1992},", "  {\"CP1361\",      \"KSC\",      CS_KR_X_1992},", "  {\"MAC\",         \"KSCpc\",    CS_KR_MAC},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP1361\",      \"KSC\",      CS_KR_X_1992},", "  {\"MAC\",         \"KSCpc\",    CS_KR_MAC},", "  {\"MSWINDOWS\",   \"KSCms\",    CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP1361\",      \"KSC\",      CS_KR_X_1992},", "  {\"MAC\",         \"KSCpc\",    CS_KR_MAC},", "  {\"MSWINDOWS\",   \"KSCms\",    CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MAC\",         \"KSCpc\",    CS_KR_MAC},", "  {\"MSWINDOWS\",   \"KSCms\",    CS_KR_X_1992_MS},", "  {\"CP949\",       \"KSCms\",    CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MAC\",         \"KSCpc\",    CS_KR_MAC},", "  {\"MSWINDOWS\",   \"KSCms\",    CS_KR_X_1992_MS},", "  {\"CP949\",       \"KSCms\",    CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MSWINDOWS\",   \"KSCms\",    CS_KR_X_1992_MS},", "  {\"CP949\",       \"KSCms\",    CS_KR_X_1992_MS},", "  {\"WANSUNG\",     \"KSCms\",    CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"MSWINDOWS\",   \"KSCms\",    CS_KR_X_1992_MS},", "  {\"CP949\",       \"KSCms\",    CS_KR_X_1992_MS},", "  {\"WANSUNG\",     \"KSCms\",    CS_KR_X_1992_MS},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP949\",       \"KSCms\",    CS_KR_X_1992_MS},", "  {\"WANSUNG\",     \"KSCms\",    CS_KR_X_1992_MS},", "  {\"ISO10646\",    \"UniKS\",    CS_KR_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"CP949\",       \"KSCms\",    CS_KR_X_1992_MS},", "  {\"WANSUNG\",     \"KSCms\",    CS_KR_X_1992_MS},", "  {\"ISO10646\",    \"UniKS\",    CS_KR_ISO10646}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"WANSUNG\",     \"KSCms\",    CS_KR_X_1992_MS},", "  {\"ISO10646\",    \"UniKS\",    CS_KR_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {\"WANSUNG\",     \"KSCms\",    CS_KR_X_1992_MS},", "  {\"ISO10646\",    \"UniKS\",    CS_KR_ISO10646}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["", "/* The PS prolog file version number has to match - if the prolog file is", " * updated, increment the number in the file and here.  Version checking was"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Data for table based DSC comment recognition, easy to extend if VIM needs to", " * read more comments. */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["{", "  {PRT_DSC_TITLE,       SIZEOF_CSTR(PRT_DSC_TITLE),     PRT_DSC_TITLE_TYPE},", "  {PRT_DSC_VERSION,     SIZEOF_CSTR(PRT_DSC_VERSION),"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["{", "  {PRT_DSC_TITLE,       SIZEOF_CSTR(PRT_DSC_TITLE),     PRT_DSC_TITLE_TYPE},", "  {PRT_DSC_VERSION,     SIZEOF_CSTR(PRT_DSC_VERSION),"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {PRT_DSC_TITLE,       SIZEOF_CSTR(PRT_DSC_TITLE),     PRT_DSC_TITLE_TYPE},", "  {PRT_DSC_VERSION,     SIZEOF_CSTR(PRT_DSC_VERSION),", "   PRT_DSC_VERSION_TYPE},"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {PRT_DSC_VERSION,     SIZEOF_CSTR(PRT_DSC_VERSION),", "   PRT_DSC_VERSION_TYPE},", "  {PRT_DSC_ENDCOMMENTS, SIZEOF_CSTR(PRT_DSC_ENDCOMMENTS),"], "whitespace/indent"]
["src/nvim/hardcopy.c", ["  {PRT_DSC_VERSION,     SIZEOF_CSTR(PRT_DSC_VERSION),", "   PRT_DSC_VERSION_TYPE},", "  {PRT_DSC_ENDCOMMENTS, SIZEOF_CSTR(PRT_DSC_ENDCOMMENTS),"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["   PRT_DSC_VERSION_TYPE},", "  {PRT_DSC_ENDCOMMENTS, SIZEOF_CSTR(PRT_DSC_ENDCOMMENTS),", "   PRT_DSC_ENDCOMMENTS_TYPE}"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["  {PRT_DSC_ENDCOMMENTS, SIZEOF_CSTR(PRT_DSC_ENDCOMMENTS),", "   PRT_DSC_ENDCOMMENTS_TYPE}", "};"], "whitespace/indent"]
["src/nvim/hardcopy.c", ["  {PRT_DSC_ENDCOMMENTS, SIZEOF_CSTR(PRT_DSC_ENDCOMMENTS),", "   PRT_DSC_ENDCOMMENTS_TYPE}", "};"], "whitespace/braces"]
["src/nvim/hardcopy.c", ["", "/*", " * Variables for the output PostScript file."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Various offsets and dimensions in default PostScript user space (points)."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Various control variables used to decide when and how to change the"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Variables controlling physical printing."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Buffers used when generating PostScript output"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    EMSG(_(\"E455: Error writing to PostScript output file\"));", "    prt_file_error = TRUE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a string."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write an int and a space."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["{", "  sprintf((char *)prt_line_buffer, \"%d \", i);", "  prt_write_file(prt_line_buffer);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a boolean and a space."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["{", "  sprintf((char *)prt_line_buffer, \"%s \", (b ? \"T\" : \"F\"));", "  prt_write_file(prt_line_buffer);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "/*", " * Write PostScript to re-encode and define the font."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"/_%s /VIM-%s /%s ref\\n\", new_name, encoding, font);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  prt_write_file(prt_line_buffer);", "  if (prt_out_mbyte)", "    sprintf((char *)prt_line_buffer, \"/%s %d %f /_%s sffs\\n\","], "readability/braces"]
["src/nvim/hardcopy.c", ["    sprintf((char *)prt_line_buffer, \"/%s %d %f /_%s sffs\\n\",", "        new_name, height, 500./prt_ps_courier_font.wx, new_name);", "  else"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  if (prt_out_mbyte)", "    sprintf((char *)prt_line_buffer, \"/%s %d %f /_%s sffs\\n\",", "        new_name, height, 500./prt_ps_courier_font.wx, new_name);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["        new_name, height, 500./prt_ps_courier_font.wx, new_name);", "  else", "    vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),"], "readability/braces"]
["src/nvim/hardcopy.c", ["    vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "        \"/%s %d /_%s ffs\\n\", new_name, height, new_name);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a line to define the CID font."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"/_%s /%s[/%s] vim_composefont\\n\", new_name, prt_cmap, cidfont);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"/%s %d /_%s ffs\\n\", new_name, height, new_name);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a line to define a duplicate of a CID font"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"/%s %s d\\n\", new_name, original_name);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "/*", " * Convert a real value into an integer and fractional part as integers, with"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", [" */", "static void prt_real_bits(double real, int precision, int *pinteger, int *pfraction)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["  double fraction = real - integer;", "  if (real < integer)", "    fraction = -fraction;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    fraction = -fraction;", "  for (int i = 0; i < precision; i++)", "    fraction *= 10.0;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a real and a space.  Save bytes if real value has no fractional part!"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  }", "  sprintf((char *)prt_line_buffer, \" \");", "  prt_write_file(prt_line_buffer);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["", "/*", " * Write a line to define a numeric variable."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"/%s \", name);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  prt_write_real(value, prec);", "  sprintf((char *)prt_line_buffer, \"d\\n\");", "  prt_write_file(prt_line_buffer);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["    }", "    /* Draw underlines before the text as it makes it slightly easier to", "     * find the starting point."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    // Draw the text", "    if (prt_out_mbyte)", "      prt_write_string(\"<\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["      prt_write_string(\"<\");", "    else", "      prt_write_string(\"(\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_write_file_raw_len(prt_ps_buffer.ga_data, (size_t)prt_ps_buffer.ga_len);", "    if (prt_out_mbyte)", "      prt_write_string(\">\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["      prt_write_string(\">\");", "    else", "      prt_write_string(\")\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  if (STRLEN(filename) >= MAXPATHL)", "    *resource_filename = NUL;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    *resource_filename = NUL;", "  else", "    STRCPY(resource_filename, filename);"], "readability/braces"]
["src/nvim/hardcopy.c", ["  while (idx < prt_resfile.len) {", "    if (prt_resfile.buffer[idx] != PSLF && prt_resfile.buffer[idx] != PSCR)", "      break;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  while (idx < prt_resfile.len) {", "    if (prt_resfile.buffer[idx] == PSLF || prt_resfile.buffer[idx] == PSCR)", "      break;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  return STRNCMP(&prt_resfile.buffer[prt_resfile.line_start + offset],", "      string, len);", "}"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  while (idx < prt_resfile.line_end) {", "    if (isspace(prt_resfile.buffer[idx]))", "      return idx - prt_resfile.line_start;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  while (idx < prt_resfile.line_end) {", "    if (!isspace(prt_resfile.buffer[idx]))", "      return idx - prt_resfile.line_start;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "/* prt_next_dsc() - returns detail on next DSC comment line found.  Returns true", " * if a DSC comment is found, else false */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "/* Improved hand crafted parser to get the type, title, and version number of a", " * PS resource file so the file details can be added to the DSC header comments."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  prt_resfile.len = (int)fread((char *)prt_resfile.buffer, sizeof(char_u),", "      PRT_FILE_BUFFER_LEN, fd_resource);", "  if (ferror(fd_resource)) {"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    EMSG2(_(\"E457: Can't read PostScript resource file \\\"%s\\\"\"),", "        resource->filename);", "    fclose(fd_resource);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  if (prt_resfile_strncmp(offset, PRT_RESOURCE_HEADER,", "          (int)STRLEN(PRT_RESOURCE_HEADER)) != 0) {", "    EMSG2(_(\"E618: file \\\"%s\\\" is not a PostScript resource file\"),"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  if (prt_resfile_strncmp(offset, PRT_RESOURCE_RESOURCE,", "          (int)STRLEN(PRT_RESOURCE_RESOURCE)) != 0) {", "    EMSG2(_(\"E619: file \\\"%s\\\" is not a supported PostScript resource file\"),"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"%%%%%s\\n\", comment);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"%%%%%s: %s\\n\", comment, text);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"%%%%%s: (%s)\\n\", comment, text);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"%%%%%s:\", comment);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  for (i = 0; i < count; i++) {", "    sprintf((char *)prt_line_buffer, \" %d\", ints[i]);", "    prt_write_file(prt_line_buffer);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["{", "  if (comment != NULL)", "    vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),"], "readability/braces"]
["src/nvim/hardcopy.c", ["    vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "        \"%%%%%s: %s\", comment, type);", "  else"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["        \"%%%%%s: %s\", comment, type);", "  else", "    vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),"], "readability/braces"]
["src/nvim/hardcopy.c", ["    vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "        \"%%%%+ %s\", type);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \" %s\\n\", string);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  prt_dsc_resources(resource, \"font\",", "      ps_font->ps_fontname[PRT_PS_FONT_ROMAN]);", "  for (i = PRT_PS_FONT_BOLD; i <= PRT_PS_FONT_BOLDOBLIQUE; i++)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      ps_font->ps_fontname[PRT_PS_FONT_ROMAN]);", "  for (i = PRT_PS_FONT_BOLD; i <= PRT_PS_FONT_BOLDOBLIQUE; i++)", "    if (ps_font->ps_fontname[i] != NULL)"], "readability/braces"]
["src/nvim/hardcopy.c", ["  for (i = PRT_PS_FONT_BOLD; i <= PRT_PS_FONT_BOLDOBLIQUE; i++)", "    if (ps_font->ps_fontname[i] != NULL)", "      prt_dsc_resources(NULL, \"font\", ps_font->ps_fontname[i]);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "static void prt_dsc_requirements(int duplex, int tumble, int collate, int color, int num_copies)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["{", "  /* Only output the comment if we need to.", "   * Note: tumble is ignored if we are not duplexing"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["   */", "  if (!(duplex || collate || color || (num_copies > 1)))", "    return;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  sprintf((char *)prt_line_buffer, \"%%%%Requirements:\");", "  prt_write_file(prt_line_buffer);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["    prt_write_string(\" duplex\");", "    if (tumble)", "      prt_write_string(\"(tumble)\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["  }", "  if (collate)", "    prt_write_string(\" collate\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_write_string(\" collate\");", "  if (color)", "    prt_write_string(\" color\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "static void prt_dsc_docmedia(char *paper_name, double width, double height, double weight, char *colour, char *type)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["  vim_snprintf((char *)prt_line_buffer, sizeof(prt_line_buffer),", "      \"%%%%DocumentMedia: %s \", paper_name);", "  prt_write_file(prt_line_buffer);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  prt_write_real(weight, 2);", "  if (colour == NULL)", "    prt_write_string(\"()\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_write_string(\"()\");", "  else", "    prt_write_string(colour);"], "readability/braces"]
["src/nvim/hardcopy.c", ["  prt_write_string(\" \");", "  if (type == NULL)", "    prt_write_string(\"()\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_write_string(\"()\");", "  else", "    prt_write_string(type);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "    /* Free off all CID font names created, but first clear duplicate", "     * pointers to the same string (when the same font is used for more than"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    for (i = PRT_PS_FONT_ROMAN; i <= PRT_PS_FONT_BOLDOBLIQUE; i++) {", "      if (prt_ps_mb_font.ps_fontname[i] != NULL)", "        xfree(prt_ps_mb_font.ps_fontname[i]);"], "readability/braces"]
["src/nvim/hardcopy.c", ["    convert_setup(&prt_conv, NULL, NULL);", "    prt_do_conv = FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["    prt_ps_fd = NULL;", "    prt_file_error = FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "/*", " * Calculate margins for given width and height from printoptions settings."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", [" */", "static void prt_page_margins(double width, double height, double *left, double *right, double *top, double *bottom)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["    prt_number_width = PRINT_NUMBER_WIDTH * prt_char_width;", "    /* If we are outputting multi-byte characters then line numbers will be", "     * printed with half width characters"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["     */", "    if (prt_out_mbyte)", "      prt_number_width /= 2;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_left_margin += prt_number_width;", "  } else", "    prt_number_width = 0.0;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "/*", " * Get number of lines of text that fit on a page (excluding the header)."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Calculate offset to lower left corner of background rect based on actual"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  prt_bgcol_offset = PRT_PS_FONT_TO_USER(prt_line_height,", "      prt_ps_font->bbox_min_y);", "  if ((prt_ps_font->bbox_max_y - prt_ps_font->bbox_min_y) < 1000.0) {"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_bgcol_offset -= PRT_PS_FONT_TO_USER(prt_line_height,", "        (1000.0 - (prt_ps_font->bbox_max_y -", "                   prt_ps_font->bbox_min_y)) / 2);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "static int prt_match_encoding(char *p_encoding, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_encoding_S **pp_mbenc)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["      *pp_mbenc = p_mbenc;", "      return TRUE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  }", "  return FALSE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "static int prt_match_charset(char *p_charset, struct prt_ps_mbfont_S *p_cmap, struct prt_ps_charset_S **pp_mbchar)", "{"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["      *pp_mbchar = p_mbchar;", "      return TRUE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  }", "  return FALSE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set up font and encoding."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  p_encoding = enc_skip(p_penc);", "  if (*p_encoding == NUL)", "    p_encoding = enc_skip(p_enc);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /* Look for a multi-byte font that matches the encoding and character set.", "   * Only look if multi-byte character set is defined, or using multi-byte"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    int effective_cmap = 0;", "    for (cmap = 0; cmap < (int)ARRAY_SIZE(prt_ps_mbfonts); cmap++)", "      if (prt_match_encoding((char *)p_encoding, &prt_ps_mbfonts[cmap],"], "readability/braces"]
["src/nvim/hardcopy.c", ["        }", "        if (prt_match_charset((char *)p_pmcs, &prt_ps_mbfonts[cmap], &p_mbchar))", "          break;"], "readability/braces"]
["src/nvim/hardcopy.c", ["        EMSG(_(\"E673: Incompatible multi-byte encoding and character set.\"));", "        return FALSE;", "      }"], "readability/bool"]
["src/nvim/hardcopy.c", ["      if (*p_pmcs == NUL) {", "        EMSG(_(\"E674: printmbcharset cannot be empty with multi-byte encoding.\"));", "        return FALSE;"], "whitespace/line_length"]
["src/nvim/hardcopy.c", ["        EMSG(_(\"E674: printmbcharset cannot be empty with multi-byte encoding.\"));", "        return FALSE;", "      }"], "readability/bool"]
["src/nvim/hardcopy.c", ["      EMSG(_(\"E675: No default font specified for multi-byte printing.\"));", "      return FALSE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["                             mbfont_opts[OPT_MBFONT_BOLD].strlen);", "", "    }"], "whitespace/blank_line"]
["src/nvim/hardcopy.c", ["  } else {", "    prt_use_courier = FALSE;", "    prt_ps_font = &prt_ps_courier_font;"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Find the size of the paper and set the margins."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  }", "  for (i = 0; i < (int)PRT_MEDIASIZE_LEN; ++i)", "    if (STRLEN(prt_mediasize[i].name) == (unsigned)paper_strlen"], "readability/braces"]
["src/nvim/hardcopy.c", ["  }", "  for (i = 0; i < (int)PRT_MEDIASIZE_LEN; ++i)", "    if (STRLEN(prt_mediasize[i].name) == (unsigned)paper_strlen"], "readability/increment"]
["src/nvim/hardcopy.c", ["  for (i = 0; i < (int)PRT_MEDIASIZE_LEN; ++i)", "    if (STRLEN(prt_mediasize[i].name) == (unsigned)paper_strlen", "        && STRNICMP(prt_mediasize[i].name, paper_name,"], "readability/braces"]
["src/nvim/hardcopy.c", ["        && STRNICMP(prt_mediasize[i].name, paper_name,", "            paper_strlen) == 0)", "      break;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["        && STRNICMP(prt_mediasize[i].name, paper_name,", "            paper_strlen) == 0)", "      break;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      break;", "  if (i == PRT_MEDIASIZE_LEN)", "    i = 0;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set PS pagesize based on media dimensions and print orientation."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  prt_page_margins(prt_page_width, prt_page_height, &left, &right, &top,", "      &bottom);", "  prt_left_margin = left;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set up the font size."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  fontsize = PRT_PS_DEFAULT_FONTSIZE;", "  for (p = p_pfn; (p = vim_strchr(p, ':')) != NULL; ++p)", "    if (p[1] == 'h' && ascii_isdigit(p[2]))"], "readability/braces"]
["src/nvim/hardcopy.c", ["  fontsize = PRT_PS_DEFAULT_FONTSIZE;", "  for (p = p_pfn; (p = vim_strchr(p, ':')) != NULL; ++p)", "    if (p[1] == 'h' && ascii_isdigit(p[2]))"], "readability/increment"]
["src/nvim/hardcopy.c", ["  for (p = p_pfn; (p = vim_strchr(p, ':')) != NULL; ++p)", "    if (p[1] == 'h' && ascii_isdigit(p[2]))", "      fontsize = atoi((char *)p + 2);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Return the number of characters per line, and lines per page for the"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Sort out the number of copies to be printed.  PS by default will do"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Set up printer duplex and tumble based on Duplex option setting - default"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["   */", "  prt_duplex = TRUE;", "  prt_tumble = FALSE;"], "readability/bool"]
["src/nvim/hardcopy.c", ["  prt_duplex = TRUE;", "  prt_tumble = FALSE;", "  psettings->duplex = 1;"], "readability/bool"]
["src/nvim/hardcopy.c", ["    if (STRNICMP(printer_opts[OPT_PRINT_DUPLEX].string, \"off\", 3) == 0) {", "      prt_duplex = FALSE;", "      psettings->duplex = 0;"], "readability/bool"]
["src/nvim/hardcopy.c", ["      psettings->duplex = 0;", "    } else if (STRNICMP(printer_opts[OPT_PRINT_DUPLEX].string, \"short\", 5)", "               == 0)"], "readability/braces"]
["src/nvim/hardcopy.c", ["               == 0)", "      prt_tumble = TRUE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  prt_bufsiz = psettings->chars_per_line;", "  if (prt_out_mbyte)", "    prt_bufsiz *= 2;"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  prt_file_error = FALSE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["{", "  FILE*       fd_resource;", "  char_u resource_buffer[512];"], "whitespace/operators"]
["src/nvim/hardcopy.c", ["    EMSG2(_(\"E456: Can't open file \\\"%s\\\"\"), resource->filename);", "    return FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  prt_dsc_resources(\"BeginResource\", prt_resource_types[resource->type],", "      (char *)resource->title);", ""], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    bytes_read = fread((char *)resource_buffer, sizeof(char_u),", "        sizeof(resource_buffer), fd_resource);", "    if (ferror(fd_resource)) {"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      EMSG2(_(\"E457: Can't read PostScript resource file \\\"%s\\\"\"),", "          resource->filename);", "      fclose(fd_resource);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      fclose(fd_resource);", "      return FALSE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["    }", "    if (bytes_read == 0)", "      break;"], "readability/braces"]
["src/nvim/hardcopy.c", ["      fclose(fd_resource);", "      return FALSE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  return TRUE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["  struct prt_ps_resource_S res_cmap;", "  int retval = FALSE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS DSC Header comments - no PS code!"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  p = vim_strchr((char_u *)p_time, '\\n');", "  if (p != NULL)", "    *p = NUL;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  prt_dsc_textline(\"PageOrder\", \"Ascend\");", "  /* The bbox does not change with orientation - it is always in the default", "   * user coordinate system!  We have to recalculate right and bottom"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  prt_page_margins(prt_mediasize[prt_media].width,", "      prt_mediasize[prt_media].height,", "      &left, &right, &top, &bottom);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      prt_mediasize[prt_media].height,", "      &left, &right, &top, &bottom);", "  bbox[0] = (int)left;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  if (prt_portrait) {", "    /* In portrait printing the fixed point is the top left corner so we", "     * derive the bbox from that point.  We have the expected cpl chars"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  } else {", "    /* In landscape printing the fixed point is the bottom left corner so we", "     * derive the bbox from that point.  We have lpp chars across the media"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["                           : \"DocumentNeededResources\"), &prt_ps_mb_font);", "    if (!prt_custom_cmap)", "      prt_dsc_resources(NULL, \"cmap\", prt_cmap);"], "readability/braces"]
["src/nvim/hardcopy.c", ["    EMSG(_(\"E456: Can't find PostScript resource file \\\"prolog.ps\\\"\"));", "    return FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  }", "  if (!prt_open_resource(&res_prolog))", "    return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (!prt_open_resource(&res_prolog))", "    return FALSE;", "  if (!prt_check_resource(&res_prolog, PRT_PROLOG_VERSION))"], "readability/bool"]
["src/nvim/hardcopy.c", ["    return FALSE;", "  if (!prt_check_resource(&res_prolog, PRT_PROLOG_VERSION))", "    return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (!prt_check_resource(&res_prolog, PRT_PROLOG_VERSION))", "    return FALSE;", "  if (prt_out_mbyte) {"], "readability/bool"]
["src/nvim/hardcopy.c", ["      EMSG(_(\"E456: Can't find PostScript resource file \\\"cidfont.ps\\\"\"));", "      return FALSE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["    }", "    if (!prt_open_resource(&res_cidfont))", "      return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    if (!prt_open_resource(&res_cidfont))", "      return FALSE;", "    if (!prt_check_resource(&res_cidfont, PRT_CID_PROLOG_VERSION))"], "readability/bool"]
["src/nvim/hardcopy.c", ["      return FALSE;", "    if (!prt_check_resource(&res_cidfont, PRT_CID_PROLOG_VERSION))", "      return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    if (!prt_check_resource(&res_cidfont, PRT_CID_PROLOG_VERSION))", "      return FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /* Find an encoding to use for printing.", "   * Check 'printencoding'. If not set or not found, then use 'encoding'. If"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["          EMSG2(_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"),", "              p_encoding);", "          return FALSE;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["              p_encoding);", "          return FALSE;", "        }"], "readability/bool"]
["src/nvim/hardcopy.c", ["    }", "    if (!prt_open_resource(&res_encoding))", "      return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    if (!prt_open_resource(&res_encoding))", "      return FALSE;", "    /* For the moment there are no checks on encoding resource files to"], "readability/bool"]
["src/nvim/hardcopy.c", ["      return FALSE;", "    /* For the moment there are no checks on encoding resource files to", "     * perform */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    p_encoding = enc_skip(p_penc);", "    if (*p_encoding == NUL)", "      p_encoding = enc_skip(p_enc);"], "readability/braces"]
["src/nvim/hardcopy.c", ["        EMSG2(_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"),", "            prt_ascii_encoding);", "        return FALSE;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["            prt_ascii_encoding);", "        return FALSE;", "      }"], "readability/bool"]
["src/nvim/hardcopy.c", ["      }", "      if (!prt_open_resource(&res_encoding))", "        return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["      if (!prt_open_resource(&res_encoding))", "        return FALSE;", "      /* For the moment there are no checks on encoding resource files to"], "readability/bool"]
["src/nvim/hardcopy.c", ["        return FALSE;", "      /* For the moment there are no checks on encoding resource files to", "       * perform */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["      EMSG2(_(\"E456: Can't find PostScript resource file \\\"%s.ps\\\"\"),", "          prt_cmap);", "      return FALSE;"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          prt_cmap);", "      return FALSE;", "    }"], "readability/bool"]
["src/nvim/hardcopy.c", ["    }", "    if (!prt_open_resource(&res_cmap))", "      return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    if (!prt_open_resource(&res_cmap))", "      return FALSE;", "  }"], "readability/bool"]
["src/nvim/hardcopy.c", ["  prt_dsc_requirements(prt_duplex, prt_tumble, prt_collate,", "      psettings->do_syntax", "      , prt_num_copies);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      psettings->do_syntax", "      , prt_num_copies);", "  prt_dsc_noarg(\"EndComments\");"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS Document page defaults"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    prt_dsc_font_resource((prt_use_courier ? NULL : \"PageResources\"),", "        &prt_ps_mb_font);", "    if (!prt_custom_cmap)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["        &prt_ps_mb_font);", "    if (!prt_custom_cmap)", "      prt_dsc_resources(NULL, \"cmap\", prt_cmap);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS Document prolog inclusion - all required procsets."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  if (!prt_out_mbyte || prt_use_courier)", "    /* There will be only one Roman font encoding to be included in the PS"], "readability/braces"]
["src/nvim/hardcopy.c", ["  if (!prt_out_mbyte || prt_use_courier)", "    /* There will be only one Roman font encoding to be included in the PS", "     * file. */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["     * file. */", "    if (!prt_add_resource(&res_encoding))", "      return FALSE;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    if (!prt_add_resource(&res_encoding))", "      return FALSE;", ""], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /*", "   * PS Document setup - must appear after the prolog"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["  if (!prt_out_mbyte || prt_use_courier) {", "    /* When using Courier for ASCII range when printing multi-byte, need to", "     * pick up ASCII encoding to use with it. */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["     * pick up ASCII encoding to use with it. */", "    if (prt_use_courier)", "      p_encoding = (char_u *)prt_ascii_encoding;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_dsc_resources(\"IncludeResource\", \"font\",", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_ROMAN]);", "    prt_def_font(\"F0\", (char *)p_encoding, (int)prt_line_height,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_def_font(\"F0\", (char *)p_encoding, (int)prt_line_height,", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_ROMAN]);", "    prt_dsc_resources(\"IncludeResource\", \"font\","], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_dsc_resources(\"IncludeResource\", \"font\",", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_BOLD]);", "    prt_def_font(\"F1\", (char *)p_encoding, (int)prt_line_height,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_def_font(\"F1\", (char *)p_encoding, (int)prt_line_height,", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_BOLD]);", "    prt_dsc_resources(\"IncludeResource\", \"font\","], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_dsc_resources(\"IncludeResource\", \"font\",", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_OBLIQUE]);", "    prt_def_font(\"F2\", (char *)p_encoding, (int)prt_line_height,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_def_font(\"F2\", (char *)p_encoding, (int)prt_line_height,", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_OBLIQUE]);", "    prt_dsc_resources(\"IncludeResource\", \"font\","], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_dsc_resources(\"IncludeResource\", \"font\",", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_BOLDOBLIQUE]);", "    prt_def_font(\"F3\", (char *)p_encoding, (int)prt_line_height,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["    prt_def_font(\"F3\", (char *)p_encoding, (int)prt_line_height,", "        prt_ps_courier_font.ps_fontname[PRT_PS_FONT_BOLDOBLIQUE]);", "  }"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  if (prt_out_mbyte) {", "    /* Define the CID fonts to be used in the job.\tTypically CJKV fonts do", "     * not have an italic form being a western style, so where no font is"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    prt_dsc_resources(\"IncludeResource\", \"font\",", "        prt_ps_mb_font.ps_fontname[PRT_PS_FONT_ROMAN]);", "    if (!prt_custom_cmap)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["        prt_ps_mb_font.ps_fontname[PRT_PS_FONT_ROMAN]);", "    if (!prt_custom_cmap)", "      prt_dsc_resources(\"IncludeResource\", \"cmap\", prt_cmap);"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_def_cidfont(\"CF0\", (int)prt_line_height,", "        prt_ps_mb_font.ps_fontname[PRT_PS_FONT_ROMAN]);", ""], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["      prt_dsc_resources(\"IncludeResource\", \"font\",", "          prt_ps_mb_font.ps_fontname[PRT_PS_FONT_BOLD]);", "      if (!prt_custom_cmap)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          prt_ps_mb_font.ps_fontname[PRT_PS_FONT_BOLD]);", "      if (!prt_custom_cmap)", "        prt_dsc_resources(\"IncludeResource\", \"cmap\", prt_cmap);"], "readability/braces"]
["src/nvim/hardcopy.c", ["      prt_dsc_resources(\"IncludeResource\", \"font\",", "          prt_ps_mb_font.ps_fontname[PRT_PS_FONT_OBLIQUE]);", "      if (!prt_custom_cmap)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          prt_ps_mb_font.ps_fontname[PRT_PS_FONT_OBLIQUE]);", "      if (!prt_custom_cmap)", "        prt_dsc_resources(\"IncludeResource\", \"cmap\", prt_cmap);"], "readability/braces"]
["src/nvim/hardcopy.c", ["      prt_dsc_resources(\"IncludeResource\", \"font\",", "          prt_ps_mb_font.ps_fontname[PRT_PS_FONT_BOLDOBLIQUE]);", "      if (!prt_custom_cmap)"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["          prt_ps_mb_font.ps_fontname[PRT_PS_FONT_BOLDOBLIQUE]);", "      if (!prt_custom_cmap)", "        prt_dsc_resources(\"IncludeResource\", \"cmap\", prt_cmap);"], "readability/braces"]
["src/nvim/hardcopy.c", ["  prt_def_var(\"UO\", PRT_PS_FONT_TO_USER(prt_line_height,", "          prt_ps_font->uline_offset), 2);", "  prt_def_var(\"UW\", PRT_PS_FONT_TO_USER(prt_line_height,"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["  prt_def_var(\"UW\", PRT_PS_FONT_TO_USER(prt_line_height,", "          prt_ps_font->uline_width), 2);", "  prt_def_var(\"BO\", prt_bgcol_offset, 2);"], "whitespace/alignment"]
["src/nvim/hardcopy.c", ["", "  /*", "   * Output any info we don't know in toto until we finish"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /* Write CTRL-D to close serial communication link if used.", "   * NOTHING MUST BE WRITTEN AFTER THIS! */"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    // Not printing to a file: use 'printexpr' to print the file.", "    if (eval_printexpr((char *) prt_ps_file_name, (char *) psettings->arguments)", "        == FAIL) {"], "whitespace/cast"]
["src/nvim/hardcopy.c", ["  prt_in_ascii = !prt_out_mbyte;", "  if (prt_out_mbyte)", "    prt_write_string(\"CF0 sf\\n\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["    prt_write_string(\"CF0 sf\\n\");", "  else", "    prt_write_string(\"F0 sf\\n\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["{", "  return mch_print_begin_page(NULL) ? (mch_print_end_page()) : FALSE;", "}"], "readability/bool"]
["src/nvim/hardcopy.c", ["", "  /* Ideally VIM would create a rearranged CID font to combine a Roman and", "   * CJKV font to do what VIM is doing here - use a Roman font for characters"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["", "  /* Output any required changes to the graphics state, after flushing any", "   * text buffered so far."], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["      prt_write_real(r / 255.0, 3);", "      if (r == g && g == b)", "        prt_write_string(\"g\\n\");"], "readability/braces"]
["src/nvim/hardcopy.c", ["        prt_write_string(\"g\\n\");", "      else {", "        prt_write_real(g / 255.0, 3);"], "readability/braces"]
["src/nvim/hardcopy.c", ["        prt_write_string(\"g\\n\");", "      else {", "        prt_write_real(g / 255.0, 3);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "    if (prt_need_underline)", "      prt_do_underline = prt_underline;"], "readability/braces"]
["src/nvim/hardcopy.c", ["  } else {", "    /* Add next character to buffer of characters to output.", "     * Note: One printed character may require several PS characters to"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["    if (ch < 32 || ch == '(' || ch == ')' || ch == '\\\\') {", "      /* Convert non-printing characters to either their escape or octal", "       * sequence, ensures PS sent over a serial line does not interfere"], "readability/old_style_comment"]
["src/nvim/hardcopy.c", ["      default:", "        sprintf((char *)ch_buff, \"%03o\", (unsigned int)ch);", "        ga_append(&prt_ps_buffer, (char)ch_buff[0]);"], "runtime/printf"]
["src/nvim/hardcopy.c", ["      }", "    } else", "      ga_append(&prt_ps_buffer, (char)ch);"], "readability/braces"]
["src/nvim/hardcopy.c", ["", "  if (iBold)", "    font |= 0x01;"], "readability/braces"]
["src/nvim/hardcopy.c", ["    font |= 0x01;", "  if (iItalic)", "    font |= 0x02;"], "readability/braces"]
