["src/nvim/ex_eval.h", ["", "/* There is no CSF_IF, the lack of CSF_WHILE, CSF_FOR and CSF_TRY means \":if\"", " * was used. */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", [" * was used. */", "# define CSF_TRUE       0x0001  /* condition was TRUE */", "# define CSF_ACTIVE     0x0002  /* current state is active */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_TRUE       0x0001  /* condition was TRUE */", "# define CSF_ACTIVE     0x0002  /* current state is active */", "# define CSF_ELSE       0x0004  /* \":else\" has been passed */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_ACTIVE     0x0002  /* current state is active */", "# define CSF_ELSE       0x0004  /* \":else\" has been passed */", "# define CSF_WHILE      0x0008  /* is a \":while\" */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_ELSE       0x0004  /* \":else\" has been passed */", "# define CSF_WHILE      0x0008  /* is a \":while\" */", "# define CSF_FOR        0x0010  /* is a \":for\" */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_WHILE      0x0008  /* is a \":while\" */", "# define CSF_FOR        0x0010  /* is a \":for\" */", ""], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["", "# define CSF_TRY        0x0100  /* is a \":try\" */", "# define CSF_FINALLY    0x0200  /* \":finally\" has been passed */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_TRY        0x0100  /* is a \":try\" */", "# define CSF_FINALLY    0x0200  /* \":finally\" has been passed */", "# define CSF_THROWN     0x0400  /* exception thrown to this try conditional */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_FINALLY    0x0200  /* \":finally\" has been passed */", "# define CSF_THROWN     0x0400  /* exception thrown to this try conditional */", "# define CSF_CAUGHT     0x0800  /* exception caught by this try conditional */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_THROWN     0x0400  /* exception thrown to this try conditional */", "# define CSF_CAUGHT     0x0800  /* exception caught by this try conditional */", "# define CSF_SILENT     0x1000  /* \"emsg_silent\" reset by \":try\" */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_CAUGHT     0x0800  /* exception caught by this try conditional */", "# define CSF_SILENT     0x1000  /* \"emsg_silent\" reset by \":try\" */", "/* Note that CSF_ELSE is only used when CSF_TRY and CSF_WHILE are unset"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSF_SILENT     0x1000  /* \"emsg_silent\" reset by \":try\" */", "/* Note that CSF_ELSE is only used when CSF_TRY and CSF_WHILE are unset", " * (an \":if\"), and CSF_SILENT is only used when CSF_TRY is set. */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["", "/*", " * What's pending for being reactivated at the \":endtry\" of this try"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", [" */", "# define CSTP_NONE      0       /* nothing pending in \":finally\" clause */", "# define CSTP_ERROR     1       /* an error is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_NONE      0       /* nothing pending in \":finally\" clause */", "# define CSTP_ERROR     1       /* an error is pending */", "# define CSTP_INTERRUPT 2       /* an interrupt is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_ERROR     1       /* an error is pending */", "# define CSTP_INTERRUPT 2       /* an interrupt is pending */", "# define CSTP_THROW     4       /* a throw is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_INTERRUPT 2       /* an interrupt is pending */", "# define CSTP_THROW     4       /* a throw is pending */", "# define CSTP_BREAK     8       /* \":break\" is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_THROW     4       /* a throw is pending */", "# define CSTP_BREAK     8       /* \":break\" is pending */", "# define CSTP_CONTINUE  16      /* \":continue\" is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_BREAK     8       /* \":break\" is pending */", "# define CSTP_CONTINUE  16      /* \":continue\" is pending */", "# define CSTP_RETURN    24      /* \":return\" is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_CONTINUE  16      /* \":continue\" is pending */", "# define CSTP_RETURN    24      /* \":return\" is pending */", "# define CSTP_FINISH    32      /* \":finish\" is pending */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["# define CSTP_RETURN    24      /* \":return\" is pending */", "# define CSTP_FINISH    32      /* \":finish\" is pending */", ""], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["", "/*", " * A list of error messages that can be converted to an exception.  \"throw_msg\""], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["struct msglist {", "  char_u              *msg;             /* original message */", "  char_u              *throw_msg;       /* msg to throw: usually original one */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["  char_u              *msg;             /* original message */", "  char_u              *throw_msg;       /* msg to throw: usually original one */", "  struct msglist      *next;            /* next of several messages in a row */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["  char_u              *throw_msg;       /* msg to throw: usually original one */", "  struct msglist      *next;            /* next of several messages in a row */", "};"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["", "/*", " * Structure describing an exception."], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["", "/*", " * Structure to save the error/interrupt/exception state between calls to"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["struct cleanup_stuff {", "  int pending;                  /* error/interrupt/exception state */", "  except_T *exception;          /* exception value */"], "readability/old_style_comment"]
["src/nvim/ex_eval.h", ["  int pending;                  /* error/interrupt/exception state */", "  except_T *exception;          /* exception value */", "};"], "readability/old_style_comment"]
