["src/nvim/lib/kbtree.h", ["// marker so line numbers and indices both start at 1", "/*-", " * Copyright 1997-1999, 2001, John-Mark Gurney."], "readability/old_style_comment"]
["src/nvim/lib/kbtree.h", ["", "#define\t__KB_KEY(type, x)\t(x->key)", "#define __KB_PTR(btr, x)\t(x->ptr)"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define\t__KB_KEY(type, x)\t(x->key)", "#define __KB_PTR(btr, x)\t(x->ptr)", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_TREE_T(name,key_t,T)\t\t\t\t\t\t\\", "    typedef struct kbnode_##name##_s kbnode_##name##_t;     \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_TREE_T(name,key_t,T)\t\t\t\t\t\t\\", "    typedef struct kbnode_##name##_s kbnode_##name##_t;     \\"], "whitespace/comma"]
["src/nvim/lib/kbtree.h", ["#define __KB_TREE_T(name,key_t,T)\t\t\t\t\t\t\\", "    typedef struct kbnode_##name##_s kbnode_##name##_t;     \\", "    struct kbnode_##name##_s {              \\"], "whitespace/line_continuation"]
["src/nvim/lib/kbtree.h", ["    typedef struct kbnode_##name##_s kbnode_##name##_t;     \\", "    struct kbnode_##name##_s {              \\", "      int32_t n; \\"], "whitespace/line_continuation"]
["src/nvim/lib/kbtree.h", ["      bool is_internal; \\", "      key_t key[2*T-1]; \\", "      kbnode_##name##_t *ptr[]; \\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["        kbnode_##name##_t *root; \\", "        int\tn_keys, n_nodes; \\", "    } kbtree_##name##_t; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __kb_destroy(kbnode_t,b) do {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i;                                                          \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __kb_destroy(kbnode_t,b) do {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i;                                                          \\"], "whitespace/comma"]
["src/nvim/lib/kbtree.h", ["#define __kb_destroy(kbnode_t,b) do {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i;                                                          \\", "        unsigned int max = 8;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __kb_destroy(kbnode_t,b) do {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i;                                                          \\", "        unsigned int max = 8;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_continuation"]
["src/nvim/lib/kbtree.h", ["\t\tint i;                                                          \\", "        unsigned int max = 8;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x, **top, **stack = 0;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["        unsigned int max = 8;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x, **top, **stack = 0;\t\t\t\t\t\t\t\t\\", "\t\tif (b->root) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *x, **top, **stack = 0;\t\t\t\t\t\t\t\t\\", "\t\tif (b->root) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ttop = stack = (kbnode_t**)xcalloc(max, sizeof(kbnode_t*));\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (b->root) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ttop = stack = (kbnode_t**)xcalloc(max, sizeof(kbnode_t*));\t\\", "\t\t\t*top++ = (b)->root;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (b->root) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ttop = stack = (kbnode_t**)xcalloc(max, sizeof(kbnode_t*));\t\\", "\t\t\t*top++ = (b)->root;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\ttop = stack = (kbnode_t**)xcalloc(max, sizeof(kbnode_t*));\t\\", "\t\t\t*top++ = (b)->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\twhile (top != stack) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ttop = stack = (kbnode_t**)xcalloc(max, sizeof(kbnode_t*));\t\\", "\t\t\t*top++ = (b)->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\twhile (top != stack) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t*top++ = (b)->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\twhile (top != stack) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tx = *--top;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\twhile (top != stack) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tx = *--top;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tif (x->is_internal == 0) { XFREE_CLEAR(x); continue; }\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tx = *--top;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tif (x->is_internal == 0) { XFREE_CLEAR(x); continue; }\t\t\t\\", "\t\t\t\tfor (i = 0; i <= x->n; ++i)\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tx = *--top;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tif (x->is_internal == 0) { XFREE_CLEAR(x); continue; }\t\t\t\\", "\t\t\t\tfor (i = 0; i <= x->n; ++i)\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (x->is_internal == 0) { XFREE_CLEAR(x); continue; }\t\t\t\\", "\t\t\t\tfor (i = 0; i <= x->n; ++i)\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (__KB_PTR(b, x)[i]) {\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (x->is_internal == 0) { XFREE_CLEAR(x); continue; }\t\t\t\\", "\t\t\t\tfor (i = 0; i <= x->n; ++i)\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (__KB_PTR(b, x)[i]) {\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (x->is_internal == 0) { XFREE_CLEAR(x); continue; }\t\t\t\\", "\t\t\t\tfor (i = 0; i <= x->n; ++i)\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (__KB_PTR(b, x)[i]) {\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tfor (i = 0; i <= x->n; ++i)\t\t\t\t\t\t\t\t\\", "\t\t\t\t\tif (__KB_PTR(b, x)[i]) {\t\t\t\t\t\t\t\\", "\t\t\t\t\t\tif (top - stack == (int)max) {\t\t        \t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\tif (__KB_PTR(b, x)[i]) {\t\t\t\t\t\t\t\\", "\t\t\t\t\t\tif (top - stack == (int)max) {\t\t        \t\\", "\t\t\t\t\t\t\tmax <<= 1;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\tif (top - stack == (int)max) {\t\t        \t\\", "\t\t\t\t\t\t\tmax <<= 1;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t\tstack = (kbnode_t**)xrealloc(stack, max * sizeof(kbnode_t*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t\tmax <<= 1;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t\tstack = (kbnode_t**)xrealloc(stack, max * sizeof(kbnode_t*)); \\", "\t\t\t\t\t\t\ttop = stack + (max>>1);\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t\tmax <<= 1;\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t\tstack = (kbnode_t**)xrealloc(stack, max * sizeof(kbnode_t*)); \\", "\t\t\t\t\t\t\ttop = stack + (max>>1);\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t\tstack = (kbnode_t**)xrealloc(stack, max * sizeof(kbnode_t*)); \\", "\t\t\t\t\t\t\ttop = stack + (max>>1);\t\t\t\t\t\t\\", "\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t\ttop = stack + (max>>1);\t\t\t\t\t\t\\", "\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t*top++ = __KB_PTR(b, x)[i];\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t*top++ = __KB_PTR(b, x)[i];\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t\t\t*top++ = __KB_PTR(b, x)[i];\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t\t*top++ = __KB_PTR(b, x)[i];\t\t\t\t\t\t\\", "\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(x);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(x);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tXFREE_CLEAR(x);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tXFREE_CLEAR(stack);\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tXFREE_CLEAR(stack);\t\t\t\t\t\t\t\t\t\t\t\\", "\t} while (0)"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tXFREE_CLEAR(stack);\t\t\t\t\t\t\t\t\t\t\t\\", "\t} while (0)", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_GET_AUX1(name, key_t, kbnode_t, __cmp)\t\t\t\t\t\t\t\t\\", "\tstatic inline int __kb_getp_aux_##name(const kbnode_t * __restrict x, key_t * __restrict k, int *r) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_GET_AUX1(name, key_t, kbnode_t, __cmp)\t\t\t\t\t\t\t\t\\", "\tstatic inline int __kb_getp_aux_##name(const kbnode_t * __restrict x, key_t * __restrict k, int *r) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_GET_AUX1(name, key_t, kbnode_t, __cmp)\t\t\t\t\t\t\t\t\\", "\tstatic inline int __kb_getp_aux_##name(const kbnode_t * __restrict x, key_t * __restrict k, int *r) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int __kb_getp_aux_##name(const kbnode_t * __restrict x, key_t * __restrict k, int *r) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint tr, *rr, begin = 0, end = x->n;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int __kb_getp_aux_##name(const kbnode_t * __restrict x, key_t * __restrict k, int *r) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint tr, *rr, begin = 0, end = x->n;\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint tr, *rr, begin = 0, end = x->n;\t\t\t\t\t\t\t\t\\", "\t\tif (x->n == 0) return -1;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint tr, *rr, begin = 0, end = x->n;\t\t\t\t\t\t\t\t\\", "\t\tif (x->n == 0) return -1;\t\t\t\t\t\t\t\t\t\t\\", "\t\trr = r? r : &tr;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint tr, *rr, begin = 0, end = x->n;\t\t\t\t\t\t\t\t\\", "\t\tif (x->n == 0) return -1;\t\t\t\t\t\t\t\t\t\t\\", "\t\trr = r? r : &tr;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tif (x->n == 0) return -1;\t\t\t\t\t\t\t\t\t\t\\", "\t\trr = r? r : &tr;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (begin < end) {\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\trr = r? r : &tr;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (begin < end) {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tint mid = (begin + end) >> 1;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\twhile (begin < end) {\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tint mid = (begin + end) >> 1;\t\t\t\t\t\t\t\t\\", "\t\t\tif (__cmp(__KB_KEY(key_t, x)[mid], *k) < 0) begin = mid + 1; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tint mid = (begin + end) >> 1;\t\t\t\t\t\t\t\t\\", "\t\t\tif (__cmp(__KB_KEY(key_t, x)[mid], *k) < 0) begin = mid + 1; \\", "\t\t\telse end = mid;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tint mid = (begin + end) >> 1;\t\t\t\t\t\t\t\t\\", "\t\t\tif (__cmp(__KB_KEY(key_t, x)[mid], *k) < 0) begin = mid + 1; \\", "\t\t\telse end = mid;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (__cmp(__KB_KEY(key_t, x)[mid], *k) < 0) begin = mid + 1; \\", "\t\t\telse end = mid;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (__cmp(__KB_KEY(key_t, x)[mid], *k) < 0) begin = mid + 1; \\", "\t\t\telse end = mid;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (__cmp(__KB_KEY(key_t, x)[mid], *k) < 0) begin = mid + 1; \\", "\t\t\telse end = mid;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t\telse end = mid;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (begin == x->n) { *rr = 1; return x->n - 1; }\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (begin == x->n) { *rr = 1; return x->n - 1; }\t\t\t\t\\", "\t\tif ((*rr = __cmp(*k, __KB_KEY(key_t, x)[begin])) < 0) --begin;\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (begin == x->n) { *rr = 1; return x->n - 1; }\t\t\t\t\\", "\t\tif ((*rr = __cmp(*k, __KB_KEY(key_t, x)[begin])) < 0) --begin;\t\\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\tif (begin == x->n) { *rr = 1; return x->n - 1; }\t\t\t\t\\", "\t\tif ((*rr = __cmp(*k, __KB_KEY(key_t, x)[begin])) < 0) --begin;\t\\", "\t\treturn begin;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (begin == x->n) { *rr = 1; return x->n - 1; }\t\t\t\t\\", "\t\tif ((*rr = __cmp(*k, __KB_KEY(key_t, x)[begin])) < 0) --begin;\t\\", "\t\treturn begin;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tif ((*rr = __cmp(*k, __KB_KEY(key_t, x)[begin])) < 0) --begin;\t\\", "\t\treturn begin;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn begin;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_GET(name, key_t, kbnode_t)\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic key_t *kb_getp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_GET(name, key_t, kbnode_t)\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic key_t *kb_getp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic key_t *kb_getp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic key_t *kb_getp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\", "\t\t    return 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (!b->root) { \\", "\t\t    return 0; \\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t    return 0; \\", "\t\t} \\", "\t\tint i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t\tint i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0 && r == 0) return &__KB_KEY(key_t, x)[i];\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0 && r == 0) return &__KB_KEY(key_t, x)[i];\t\t\\", "\t\t\tif (x->is_internal == 0) return 0;\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0 && r == 0) return &__KB_KEY(key_t, x)[i];\t\t\\", "\t\t\tif (x->is_internal == 0) return 0;\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0 && r == 0) return &__KB_KEY(key_t, x)[i];\t\t\\", "\t\t\tif (x->is_internal == 0) return 0;\t\t\t\t\t\t\t\\", "\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0 && r == 0) return &__KB_KEY(key_t, x)[i];\t\t\\", "\t\t\tif (x->is_internal == 0) return 0;\t\t\t\t\t\t\t\\", "\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (x->is_internal == 0) return 0;\t\t\t\t\t\t\t\\", "\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *kb_get_##name(kbtree_##name##_t *b, key_t k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *kb_get_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t *kb_get_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_getp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t *kb_get_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_getp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_getp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\", "\t}"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn kb_getp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\", "\t}", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_INTERVAL(name, key_t, kbnode_t)\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_intervalp_##name(kbtree_##name##_t *b, key_t * __restrict k, key_t **lower, key_t **upper)\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_INTERVAL(name, key_t, kbnode_t)\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_intervalp_##name(kbtree_##name##_t *b, key_t * __restrict k, key_t **lower, key_t **upper)\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_INTERVAL(name, key_t, kbnode_t)\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_intervalp_##name(kbtree_##name##_t *b, key_t * __restrict k, key_t **lower, key_t **upper)\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_intervalp_##name(kbtree_##name##_t *b, key_t * __restrict k, key_t **lower, key_t **upper)\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_intervalp_##name(kbtree_##name##_t *b, key_t * __restrict k, key_t **lower, key_t **upper)\t\\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\", "\t\t    return; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (!b->root) { \\", "\t\t    return; \\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t    return; \\", "\t\t} \\", "\t\tint i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t\tint i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t*lower = *upper = 0;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t*lower = *upper = 0;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *x = b->root;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t*lower = *upper = 0;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t*lower = *upper = 0;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\twhile (x) {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0 && r == 0) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0 && r == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t*lower = *upper = &__KB_KEY(key_t, x)[i];\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0 && r == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t*lower = *upper = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0 && r == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\t*lower = *upper = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t*lower = *upper = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\treturn;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0) *lower = &__KB_KEY(key_t, x)[i];\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0) *lower = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\tif (i < x->n - 1) *upper = &__KB_KEY(key_t, x)[i + 1];\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (i >= 0) *lower = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\tif (i < x->n - 1) *upper = &__KB_KEY(key_t, x)[i + 1];\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0) *lower = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\tif (i < x->n - 1) *upper = &__KB_KEY(key_t, x)[i + 1];\t\t\\", "\t\t\tif (x->is_internal == 0) return;\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0) *lower = &__KB_KEY(key_t, x)[i];\t\t\t\t\\", "\t\t\tif (i < x->n - 1) *upper = &__KB_KEY(key_t, x)[i + 1];\t\t\\", "\t\t\tif (x->is_internal == 0) return;\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i < x->n - 1) *upper = &__KB_KEY(key_t, x)[i + 1];\t\t\\", "\t\t\tif (x->is_internal == 0) return;\t\t\t\t\t\t\t\\", "\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i < x->n - 1) *upper = &__KB_KEY(key_t, x)[i + 1];\t\t\\", "\t\t\tif (x->is_internal == 0) return;\t\t\t\t\t\t\t\\", "\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (x->is_internal == 0) return;\t\t\t\t\t\t\t\\", "\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tx = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_interval_##name(kbtree_##name##_t *b, key_t k, key_t **lower, key_t **upper) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_interval_##name(kbtree_##name##_t *b, key_t k, key_t **lower, key_t **upper) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_interval_##name(kbtree_##name##_t *b, key_t k, key_t **lower, key_t **upper) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_interval_##name(kbtree_##name##_t *b, key_t k, key_t **lower, key_t **upper) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkb_intervalp_##name(b, &k, lower, upper);\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_interval_##name(kbtree_##name##_t *b, key_t k, key_t **lower, key_t **upper) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkb_intervalp_##name(b, &k, lower, upper);\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkb_intervalp_##name(b, &k, lower, upper);\t\t\t\t\t\t\\", "\t}"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkb_intervalp_##name(b, &k, lower, upper);\t\t\t\t\t\t\\", "\t}", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_PUT(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\t\t\t\t\t\t\\", "\t/* x must be an internal node */\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_PUT(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\t\t\t\t\t\t\\", "\t/* x must be an internal node */\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void __kb_split_##name(kbtree_##name##_t *b, kbnode_t *x, int i, kbnode_t *y) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t/* x must be an internal node */\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void __kb_split_##name(kbtree_##name##_t *b, kbnode_t *x, int i, kbnode_t *y) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t/* x must be an internal node */\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void __kb_split_##name(kbtree_##name##_t *b, kbnode_t *x, int i, kbnode_t *y) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void __kb_split_##name(kbtree_##name##_t *b, kbnode_t *x, int i, kbnode_t *y) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *z;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void __kb_split_##name(kbtree_##name##_t *b, kbnode_t *x, int i, kbnode_t *y) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *z;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *z;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tz = (kbnode_t*)xcalloc(1, y->is_internal? ILEN : sizeof(kbnode_##name##_t));\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *z;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tz = (kbnode_t*)xcalloc(1, y->is_internal? ILEN : sizeof(kbnode_##name##_t));\t\\", "\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *z;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tz = (kbnode_t*)xcalloc(1, y->is_internal? ILEN : sizeof(kbnode_##name##_t));\t\\", "\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\tz = (kbnode_t*)xcalloc(1, y->is_internal? ILEN : sizeof(kbnode_##name##_t));\t\\", "\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tz->is_internal = y->is_internal;\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tz = (kbnode_t*)xcalloc(1, y->is_internal? ILEN : sizeof(kbnode_##name##_t));\t\\", "\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tz->is_internal = y->is_internal;\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tz->is_internal = y->is_internal;\t\t\t\t\t\t\t\t\\", "\t\tz->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tz->is_internal = y->is_internal;\t\t\t\t\t\t\t\t\\", "\t\tz->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemcpy(__KB_KEY(key_t, z), &__KB_KEY(key_t, y)[T], sizeof(key_t) * (T - 1)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tz->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemcpy(__KB_KEY(key_t, z), &__KB_KEY(key_t, y)[T], sizeof(key_t) * (T - 1)); \\", "\t\tif (y->is_internal) memcpy(__KB_PTR(b, z), &__KB_PTR(b, y)[T], sizeof(void*) * T); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tmemcpy(__KB_KEY(key_t, z), &__KB_KEY(key_t, y)[T], sizeof(key_t) * (T - 1)); \\", "\t\tif (y->is_internal) memcpy(__KB_PTR(b, z), &__KB_PTR(b, y)[T], sizeof(void*) * T); \\", "\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tmemcpy(__KB_KEY(key_t, z), &__KB_KEY(key_t, y)[T], sizeof(key_t) * (T - 1)); \\", "\t\tif (y->is_internal) memcpy(__KB_PTR(b, z), &__KB_PTR(b, y)[T], sizeof(void*) * T); \\", "\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\tmemcpy(__KB_KEY(key_t, z), &__KB_KEY(key_t, y)[T], sizeof(key_t) * (T - 1)); \\", "\t\tif (y->is_internal) memcpy(__KB_PTR(b, z), &__KB_PTR(b, y)[T], sizeof(void*) * T); \\", "\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tmemcpy(__KB_KEY(key_t, z), &__KB_KEY(key_t, y)[T], sizeof(key_t) * (T - 1)); \\", "\t\tif (y->is_internal) memcpy(__KB_PTR(b, z), &__KB_PTR(b, y)[T], sizeof(void*) * T); \\", "\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\tif (y->is_internal) memcpy(__KB_PTR(b, z), &__KB_PTR(b, y)[T], sizeof(void*) * T); \\", "\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_PTR(b, x)[i + 2], &__KB_PTR(b, x)[i + 1], sizeof(void*) * (unsigned int)(x->n - i)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_PTR(b, x)[i + 2], &__KB_PTR(b, x)[i + 1], sizeof(void*) * (unsigned int)(x->n - i)); \\", "\t\t__KB_PTR(b, x)[i + 1] = z;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_PTR(b, x)[i + 2], &__KB_PTR(b, x)[i + 1], sizeof(void*) * (unsigned int)(x->n - i)); \\", "\t\t__KB_PTR(b, x)[i + 1] = z;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\ty->n = T - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_PTR(b, x)[i + 2], &__KB_PTR(b, x)[i + 1], sizeof(void*) * (unsigned int)(x->n - i)); \\", "\t\t__KB_PTR(b, x)[i + 1] = z;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\tmemmove(&__KB_PTR(b, x)[i + 2], &__KB_PTR(b, x)[i + 1], sizeof(void*) * (unsigned int)(x->n - i)); \\", "\t\t__KB_PTR(b, x)[i + 1] = z;\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_KEY(key_t, x)[i + 1], &__KB_KEY(key_t, x)[i], sizeof(key_t) * (unsigned int)(x->n - i)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t__KB_PTR(b, x)[i + 1] = z;\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_KEY(key_t, x)[i + 1], &__KB_KEY(key_t, x)[i], sizeof(key_t) * (unsigned int)(x->n - i)); \\", "\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[T - 1];\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t__KB_PTR(b, x)[i + 1] = z;\t\t\t\t\t\t\t\t\t\t\\", "\t\tmemmove(&__KB_KEY(key_t, x)[i + 1], &__KB_KEY(key_t, x)[i], sizeof(key_t) * (unsigned int)(x->n - i)); \\", "\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[T - 1];\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\tmemmove(&__KB_KEY(key_t, x)[i + 1], &__KB_KEY(key_t, x)[i], sizeof(key_t) * (unsigned int)(x->n - i)); \\", "\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[T - 1];\t\t\t\\", "\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[T - 1];\t\t\t\\", "\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[T - 1];\t\t\t\\", "\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *__kb_putp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *__kb_putp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *__kb_putp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t *__kb_putp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i = x->n - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t *__kb_putp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i = x->n - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint i = x->n - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkey_t *ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint i = x->n - 1;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkey_t *ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkey_t *ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, 0);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, 0);\t\t\t\t\t\t\t\\", "\t\t\tif (i != x->n - 1)\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(x, k, 0);\t\t\t\t\t\t\t\\", "\t\t\tif (i != x->n - 1)\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i + 2], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(x, k, 0);\t\t\t\t\t\t\t\\", "\t\t\tif (i != x->n - 1)\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i + 2], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i != x->n - 1)\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i + 2], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\tret = &__KB_KEY(key_t, x)[i + 1];\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i != x->n - 1)\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i + 2], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\tret = &__KB_KEY(key_t, x)[i + 1];\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i + 2], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\tret = &__KB_KEY(key_t, x)[i + 1];\t\t\t\t\t\t\t\\", "\t\t\t*ret = *k;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tret = &__KB_KEY(key_t, x)[i + 1];\t\t\t\t\t\t\t\\", "\t\t\t*ret = *k;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tret = &__KB_KEY(key_t, x)[i + 1];\t\t\t\t\t\t\t\\", "\t\t\t*ret = *k;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t*ret = *k;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t*ret = *k;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, 0) + 1;\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} else {\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ti = __kb_getp_aux_##name(x, k, 0) + 1;\t\t\t\t\t\t\\", "\t\t\tif (__KB_PTR(b, x)[i]->n == 2 * T - 1) {\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(x, k, 0) + 1;\t\t\t\t\t\t\\", "\t\t\tif (__KB_PTR(b, x)[i]->n == 2 * T - 1) {\t\t\t\t\t\\", "\t\t\t\t__kb_split_##name(b, x, i, __KB_PTR(b, x)[i]);\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (__KB_PTR(b, x)[i]->n == 2 * T - 1) {\t\t\t\t\t\\", "\t\t\t\t__kb_split_##name(b, x, i, __KB_PTR(b, x)[i]);\t\t\t\\", "\t\t\t\tif (__cmp(*k, __KB_KEY(key_t, x)[i]) > 0) ++i;\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__kb_split_##name(b, x, i, __KB_PTR(b, x)[i]);\t\t\t\\", "\t\t\t\tif (__cmp(*k, __KB_KEY(key_t, x)[i]) > 0) ++i;\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__kb_split_##name(b, x, i, __KB_PTR(b, x)[i]);\t\t\t\\", "\t\t\t\tif (__cmp(*k, __KB_KEY(key_t, x)[i]) > 0) ++i;\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (__cmp(*k, __KB_KEY(key_t, x)[i]) > 0) ++i;\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tret = __kb_putp_aux_##name(b, __KB_PTR(b, x)[i], k);\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tret = __kb_putp_aux_##name(b, __KB_PTR(b, x)[i], k);\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tret = __kb_putp_aux_##name(b, __KB_PTR(b, x)[i], k);\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn ret; \t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn ret; \t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn ret; \t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *kb_putp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *kb_putp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t *kb_putp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t *kb_putp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t *kb_putp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (!b->root) { \\", "\t\t\tb->root = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (!b->root) { \\", "\t\t\tb->root = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (!b->root) { \\", "\t\t\tb->root = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\tb->root = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tb->root = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t} \\", "\t\tkbnode_t *r, *s;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t\tkbnode_t *r, *s;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t++b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *r, *s;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t++b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tr = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *r, *s;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t++b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tr = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t++b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tr = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (r->n == 2 * T - 1) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tr = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (r->n == 2 * T - 1) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (r->n == 2 * T - 1) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ts = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (r->n == 2 * T - 1) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ts = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ts = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\t\\", "\t\t\tb->root = s; s->is_internal = 1; s->n = 0;\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t++b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\ts = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\t\\", "\t\t\tb->root = s; s->is_internal = 1; s->n = 0;\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\ts = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\t\\", "\t\t\tb->root = s; s->is_internal = 1; s->n = 0;\t\t\t\t\t\\", "\t\t\t__KB_PTR(b, s)[0] = r;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ts = (kbnode_t*)xcalloc(1, ILEN);\t\t\t\t\t\t\t\\", "\t\t\tb->root = s; s->is_internal = 1; s->n = 0;\t\t\t\t\t\\", "\t\t\t__KB_PTR(b, s)[0] = r;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t\tb->root = s; s->is_internal = 1; s->n = 0;\t\t\t\t\t\\", "\t\t\t__KB_PTR(b, s)[0] = r;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t__kb_split_##name(b, s, 0, r);\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t__KB_PTR(b, s)[0] = r;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t__kb_split_##name(b, s, 0, r);\t\t\t\t\t\t\t\t\\", "\t\t\tr = s;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t__kb_split_##name(b, s, 0, r);\t\t\t\t\t\t\t\t\\", "\t\t\tr = s;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tr = s;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn __kb_putp_aux_##name(b, r, k);\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn __kb_putp_aux_##name(b, r, k);\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn __kb_putp_aux_##name(b, r, k);\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_put_##name(kbtree_##name##_t *b, key_t k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline void kb_put_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_put_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkb_putp_##name(b, &k);\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_put_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkb_putp_##name(b, &k);\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkb_putp_##name(b, &k);\t\t\t\t\t\t\t\t\t\t\t\\", "\t}"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkb_putp_##name(b, &k);\t\t\t\t\t\t\t\t\t\t\t\\", "\t}", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["", "#define __KB_DEL(name, key_t, kbnode_t, T)\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t __kb_delp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k, int s) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_DEL(name, key_t, kbnode_t, T)\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t __kb_delp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k, int s) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_DEL(name, key_t, kbnode_t, T)\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t __kb_delp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k, int s) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t __kb_delp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k, int s) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint yn, zn, i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t __kb_delp_aux_##name(kbtree_##name##_t *b, kbnode_t *x, key_t * __restrict k, int s) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint yn, zn, i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tint yn, zn, i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *xp, *y, *z;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint yn, zn, i, r = 0;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *xp, *y, *z;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkey_t kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *xp, *y, *z;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkey_t kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x == 0) return *k;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkey_t kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x == 0) return *k;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (s) { /* s can only be 0, 1 or 2 */\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkey_t kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (x == 0) return *k;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (s) { /* s can only be 0, 1 or 2 */\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tif (x == 0) return *k;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (s) { /* s can only be 0, 1 or 2 */\t\t\t\t\t\t\t\\", "\t\t\tr = x->is_internal == 0? 0 : s == 1? 1 : -1;\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (s) { /* s can only be 0, 1 or 2 */\t\t\t\t\t\t\t\\", "\t\t\tr = x->is_internal == 0? 0 : s == 1? 1 : -1;\t\t\t\t\\", "\t\t\ti = s == 1? x->n - 1 : -1;\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tr = x->is_internal == 0? 0 : s == 1? 1 : -1;\t\t\t\t\\", "\t\t\ti = s == 1? x->n - 1 : -1;\t\t\t\t\t\t\t\t\t\\", "\t\t} else i = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = s == 1? x->n - 1 : -1;\t\t\t\t\t\t\t\t\t\\", "\t\t} else i = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\\", "\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = s == 1? x->n - 1 : -1;\t\t\t\t\t\t\t\t\t\\", "\t\t} else i = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\\", "\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = s == 1? x->n - 1 : -1;\t\t\t\t\t\t\t\t\t\\", "\t\t} else i = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\\", "\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t} else i = __kb_getp_aux_##name(x, k, &r);\t\t\t\t\t\t\\", "\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (s == 2) ++i;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (s == 2) ++i;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (x->is_internal == 0) {\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif (s == 2) ++i;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (s == 2) ++i;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\t\\", "\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\t\\", "\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\t\\", "\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (r == 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (r == 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif ((yn = __KB_PTR(b, x)[i]->n) >= T) {\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (r == 0) {\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tif ((yn = __KB_PTR(b, x)[i]->n) >= T) {\t\t\t\t\t\\", "\t\t\t\txp = __KB_PTR(b, x)[i];\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif ((yn = __KB_PTR(b, x)[i]->n) >= T) {\t\t\t\t\t\\", "\t\t\t\txp = __KB_PTR(b, x)[i];\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\txp = __KB_PTR(b, x)[i];\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i] = __kb_delp_aux_##name(b, xp, 0, 1); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i] = __kb_delp_aux_##name(b, xp, 0, 1); \\", "\t\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, x)[i] = __kb_delp_aux_##name(b, xp, 0, 1); \\", "\t\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if ((zn = __KB_PTR(b, x)[i + 1]->n) >= T) {\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if ((zn = __KB_PTR(b, x)[i + 1]->n) >= T) {\t\t\\", "\t\t\t\txp = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} else if ((zn = __KB_PTR(b, x)[i + 1]->n) >= T) {\t\t\\", "\t\t\t\txp = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\\", "\t\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\txp = __KB_PTR(b, x)[i + 1];\t\t\t\t\t\t\t\t\\", "\t\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i] = __kb_delp_aux_##name(b, xp, 0, 2); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tkp = __KB_KEY(key_t, x)[i];\t\t\t\t\t\t\t\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i] = __kb_delp_aux_##name(b, xp, 0, 2); \\", "\t\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, x)[i] = __kb_delp_aux_##name(b, xp, 0, 2); \\", "\t\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (yn == T - 1 && zn == T - 1) {\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\treturn kp;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (yn == T - 1 && zn == T - 1) {\t\t\t\t\\", "\t\t\t\ty = __KB_PTR(b, x)[i]; z = __KB_PTR(b, x)[i + 1];\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} else if (yn == T - 1 && zn == T - 1) {\t\t\t\t\\", "\t\t\t\ty = __KB_PTR(b, x)[i]; z = __KB_PTR(b, x)[i + 1];\t\t\\", "\t\t\t\t__KB_KEY(key_t, y)[y->n++] = *k;\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} else if (yn == T - 1 && zn == T - 1) {\t\t\t\t\\", "\t\t\t\ty = __KB_PTR(b, x)[i]; z = __KB_PTR(b, x)[i + 1];\t\t\\", "\t\t\t\t__KB_KEY(key_t, y)[y->n++] = *k;\t\t\t\t\t\t\\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t\t\ty = __KB_PTR(b, x)[i]; z = __KB_PTR(b, x)[i + 1];\t\t\\", "\t\t\t\t__KB_KEY(key_t, y)[y->n++] = *k;\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, y)[y->n++] = *k;\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, y)[y->n++] = *k;\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, z), (unsigned int)z->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, z), (unsigned int)(z->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\ty->n += z->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(z);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(z);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(z);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\treturn __kb_delp_aux_##name(b, y, k, s);\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tXFREE_CLEAR(z);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\treturn __kb_delp_aux_##name(b, y, k, s);\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\treturn __kb_delp_aux_##name(b, y, k, s);\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t++i;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t++i;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif ((xp = __KB_PTR(b, x)[i])->n == T - 1) {\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t++i;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif ((xp = __KB_PTR(b, x)[i])->n == T - 1) {\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t++i;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif ((xp = __KB_PTR(b, x)[i])->n == T - 1) {\t\t\t\t\t\\", "\t\t\tif (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n >= T) {\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif ((xp = __KB_PTR(b, x)[i])->n == T - 1) {\t\t\t\t\t\\", "\t\t\tif (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n >= T) {\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n >= T) {\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n >= T) {\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\t__KB_KEY(key_t, xp)[0] = __KB_KEY(key_t, x)[i - 1];\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\t__KB_KEY(key_t, xp)[0] = __KB_KEY(key_t, x)[i - 1];\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\t__KB_KEY(key_t, xp)[0] = __KB_KEY(key_t, x)[i - 1];\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[1], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t)); \\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\t__KB_KEY(key_t, xp)[0] = __KB_KEY(key_t, x)[i - 1];\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[1], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\t__KB_KEY(key_t, xp)[0] = __KB_KEY(key_t, x)[i - 1];\t\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i - 1] = __KB_KEY(key_t, y)[y->n - 1]; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, xp)[0] = __KB_KEY(key_t, x)[i - 1];\t\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i - 1] = __KB_KEY(key_t, y)[y->n - 1]; \\", "\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[0] = __KB_PTR(b, y)[y->n]; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, x)[i - 1] = __KB_KEY(key_t, y)[y->n - 1]; \\", "\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[0] = __KB_PTR(b, y)[y->n]; \\", "\t\t\t\t--y->n; ++xp->n;\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, x)[i - 1] = __KB_KEY(key_t, y)[y->n - 1]; \\", "\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[0] = __KB_PTR(b, y)[y->n]; \\", "\t\t\t\t--y->n; ++xp->n;\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[0] = __KB_PTR(b, y)[y->n]; \\", "\t\t\t\t--y->n; ++xp->n;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n >= T) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[0] = __KB_PTR(b, y)[y->n]; \\", "\t\t\t\t--y->n; ++xp->n;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n >= T) { \\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[0] = __KB_PTR(b, y)[y->n]; \\", "\t\t\t\t--y->n; ++xp->n;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n >= T) { \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t--y->n; ++xp->n;\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n >= T) { \\", "\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n >= T) { \\", "\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[0];\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\", "\t\t\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[0];\t\t\t\\", "\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[xp->n] = __KB_PTR(b, y)[0]; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[0];\t\t\t\\", "\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[xp->n] = __KB_PTR(b, y)[0]; \\", "\t\t\t\t--y->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, x)[i] = __KB_KEY(key_t, y)[0];\t\t\t\\", "\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[xp->n] = __KB_PTR(b, y)[0]; \\", "\t\t\t\t--y->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[xp->n] = __KB_PTR(b, y)[0]; \\", "\t\t\t\t--y->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) __KB_PTR(b, xp)[xp->n] = __KB_PTR(b, y)[0]; \\", "\t\t\t\t--y->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t--y->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t--y->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t} else if (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n == T - 1) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t} else if (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n == T - 1) { \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t} else if (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n == T - 1) { \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(__KB_KEY(key_t, y), &__KB_KEY(key_t, y)[1], (unsigned int)y->n * sizeof(key_t)); \\", "\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t} else if (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n == T - 1) { \\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (y->is_internal) memmove(__KB_PTR(b, y), &__KB_PTR(b, y)[1], (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t} else if (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n == T - 1) { \\", "\t\t\t\t__KB_KEY(key_t, y)[y->n++] = __KB_KEY(key_t, x)[i - 1];\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} else if (i > 0 && (y = __KB_PTR(b, x)[i - 1])->n == T - 1) { \\", "\t\t\t\t__KB_KEY(key_t, y)[y->n++] = __KB_KEY(key_t, x)[i - 1];\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, y)[y->n++] = __KB_KEY(key_t, x)[i - 1];\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, y)[y->n++] = __KB_KEY(key_t, x)[i - 1];\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, y)[y->n], __KB_KEY(key_t, xp), (unsigned int)xp->n * sizeof(key_t));\t\\", "\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (y->is_internal) memmove(&__KB_PTR(b, y)[y->n], __KB_PTR(b, xp), (unsigned int)(xp->n + 1) * sizeof(void*)); \\", "\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i - 1], &__KB_KEY(key_t, x)[i], (unsigned int)(x->n - i) * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i - 1], &__KB_KEY(key_t, x)[i], (unsigned int)(x->n - i) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\ty->n += xp->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i - 1], &__KB_KEY(key_t, x)[i], (unsigned int)(x->n - i) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i - 1], &__KB_KEY(key_t, x)[i], (unsigned int)(x->n - i) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i - 1], &__KB_KEY(key_t, x)[i], (unsigned int)(x->n - i) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i - 1], &__KB_KEY(key_t, x)[i], (unsigned int)(x->n - i) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(xp);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_PTR(b, x)[i], &__KB_PTR(b, x)[i + 1], (unsigned int)(x->n - i) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(xp);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(xp);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\txp = y;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tXFREE_CLEAR(xp);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\txp = y;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n == T - 1) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\txp = y;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n == T - 1) { \\", "\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} else if (i < x->n && (y = __KB_PTR(b, x)[i + 1])->n == T - 1) { \\", "\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t__KB_KEY(key_t, xp)[xp->n++] = __KB_KEY(key_t, x)[i];\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, xp)[xp->n], __KB_KEY(key_t, y), (unsigned int)y->n * sizeof(key_t));\t\\", "\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tif (xp->is_internal) memmove(&__KB_PTR(b, xp)[xp->n], __KB_PTR(b, y), (unsigned int)(y->n + 1) * sizeof(void*)); \\", "\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\txp->n += y->n;\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_KEY(key_t, x)[i], &__KB_KEY(key_t, x)[i + 1], (unsigned int)(x->n - i - 1) * sizeof(key_t)); \\", "\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(y);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tmemmove(&__KB_PTR(b, x)[i + 1], &__KB_PTR(b, x)[i + 2], (unsigned int)(x->n - i - 1) * sizeof(void*)); \\", "\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(y);\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t--x->n;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t\tXFREE_CLEAR(y);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\tXFREE_CLEAR(y);\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn __kb_delp_aux_##name(b, xp, k, s);\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn __kb_delp_aux_##name(b, xp, k, s);\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn __kb_delp_aux_##name(b, xp, k, s);\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t kb_delp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t kb_delp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t kb_delp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t kb_delp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t kb_delp_##name(kbtree_##name##_t *b, key_t * __restrict k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkbnode_t *x;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkey_t ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkbnode_t *x;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tkey_t ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tret = __kb_delp_aux_##name(b, b->root, k, 0);\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkey_t ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tret = __kb_delp_aux_##name(b, b->root, k, 0);\t\t\t\t\t\\", "\t\t--b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tret = __kb_delp_aux_##name(b, b->root, k, 0);\t\t\t\t\t\\", "\t\t--b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (b->root->n == 0 && b->root->is_internal) {\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tret = __kb_delp_aux_##name(b, b->root, k, 0);\t\t\t\t\t\\", "\t\t--b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (b->root->n == 0 && b->root->is_internal) {\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t--b->n_keys;\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\tif (b->root->n == 0 && b->root->is_internal) {\t\t\t\t\t\\", "\t\t\t--b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (b->root->n == 0 && b->root->is_internal) {\t\t\t\t\t\\", "\t\t\t--b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tx = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tif (b->root->n == 0 && b->root->is_internal) {\t\t\t\t\t\\", "\t\t\t--b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tx = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t--b->n_nodes;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tx = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tb->root = __KB_PTR(b, x)[0];\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tx = b->root;\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t\tb->root = __KB_PTR(b, x)[0];\t\t\t\t\t\t\t\t\\", "\t\t\tXFREE_CLEAR(x);\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tb->root = __KB_PTR(b, x)[0];\t\t\t\t\t\t\t\t\\", "\t\t\tXFREE_CLEAR(x);\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tXFREE_CLEAR(x);\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn ret;\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t kb_del_##name(kbtree_##name##_t *b, key_t k) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\tstatic inline key_t kb_del_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t kb_del_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_delp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline key_t kb_del_##name(kbtree_##name##_t *b, key_t k) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_delp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_delp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\", "\t}"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn kb_delp_##name(b, &k);\t\t\t\t\t\t\t\t\t\\", "\t}", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_ITR(name, key_t, kbnode_t) \\", "\tstatic inline void kb_itr_first_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define __KB_ITR(name, key_t, kbnode_t) \\", "\tstatic inline void kb_itr_first_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_itr_first_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\titr->p = NULL; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_itr_first_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\titr->p = NULL; \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\titr->p = NULL; \\", "\t\tif (b->n_keys == 0) return; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p = NULL; \\", "\t\tif (b->n_keys == 0) return; \\", "\t\titr->p = itr->stack; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p = NULL; \\", "\t\tif (b->n_keys == 0) return; \\", "\t\titr->p = itr->stack; \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tif (b->n_keys == 0) return; \\", "\t\titr->p = itr->stack; \\", "\t\titr->p->x = b->root; itr->p->i = 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p = itr->stack; \\", "\t\titr->p->x = b->root; itr->p->i = 0; \\", "\t\twhile (itr->p->x->is_internal && __KB_PTR(b, itr->p->x)[0] != 0) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p = itr->stack; \\", "\t\titr->p->x = b->root; itr->p->i = 0; \\", "\t\twhile (itr->p->x->is_internal && __KB_PTR(b, itr->p->x)[0] != 0) { \\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\titr->p->x = b->root; itr->p->i = 0; \\", "\t\twhile (itr->p->x->is_internal && __KB_PTR(b, itr->p->x)[0] != 0) { \\", "\t\t\tkbnode_t *x = itr->p->x; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\twhile (itr->p->x->is_internal && __KB_PTR(b, itr->p->x)[0] != 0) { \\", "\t\t\tkbnode_t *x = itr->p->x; \\", "\t\t\t++itr->p; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tkbnode_t *x = itr->p->x; \\", "\t\t\t++itr->p; \\", "\t\t\titr->p->x = __KB_PTR(b, x)[0]; itr->p->i = 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tkbnode_t *x = itr->p->x; \\", "\t\t\t++itr->p; \\", "\t\t\titr->p->x = __KB_PTR(b, x)[0]; itr->p->i = 0; \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++itr->p; \\", "\t\t\titr->p->x = __KB_PTR(b, x)[0]; itr->p->i = 0; \\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t++itr->p; \\", "\t\t\titr->p->x = __KB_PTR(b, x)[0]; itr->p->i = 0; \\", "\t\t} \\"], "whitespace/newline"]
["src/nvim/lib/kbtree.h", ["\t\t\titr->p->x = __KB_PTR(b, x)[0]; itr->p->i = 0; \\", "\t\t} \\", "\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t} \\", "\tstatic inline int kb_itr_next_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_next_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_next_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_next_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tif (itr->p == NULL) return 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_next_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tif (itr->p == NULL) return 0; \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\tif (itr->p == NULL) return 0; \\", "\t\tfor (;;) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\tif (itr->p == NULL) return 0; \\", "\t\tfor (;;) { \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tif (itr->p == NULL) return 0; \\", "\t\tfor (;;) { \\", "\t\t\t++itr->p->i; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tfor (;;) { \\", "\t\t\t++itr->p->i; \\", "\t\t\tassert(itr->p->i <= 21); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tfor (;;) { \\", "\t\t\t++itr->p->i; \\", "\t\t\tassert(itr->p->i <= 21); \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++itr->p->i; \\", "\t\t\tassert(itr->p->i <= 21); \\", "\t\t\twhile (itr->p->x && itr->p->i <= itr->p->x->n) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tassert(itr->p->i <= 21); \\", "\t\t\twhile (itr->p->x && itr->p->i <= itr->p->x->n) { \\", "\t\t\t\titr->p[1].i = 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\twhile (itr->p->x && itr->p->i <= itr->p->x->n) { \\", "\t\t\t\titr->p[1].i = 0; \\", "\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].i = 0; \\", "\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\t++itr->p; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].i = 0; \\", "\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\t++itr->p; \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\t++itr->p; \\", "\t\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\t++itr->p; \\", "\t\t\t} \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t++itr->p; \\", "\t\t\t} \\", "\t\t\tif (itr->p == itr->stack) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} \\", "\t\t\tif (itr->p == itr->stack) { \\", "\t\t\t\titr->p = NULL; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (itr->p == itr->stack) { \\", "\t\t\t\titr->p = NULL; \\", "\t\t\t\treturn 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p = NULL; \\", "\t\t\t\treturn 0; \\", "\t\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\treturn 0; \\", "\t\t\t} \\", "\t\t\t--itr->p; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} \\", "\t\t\t--itr->p; \\", "\t\t\tif (itr->p->x && itr->p->i < itr->p->x->n) return 1; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} \\", "\t\t\t--itr->p; \\", "\t\t\tif (itr->p->x && itr->p->i < itr->p->x->n) return 1; \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t--itr->p; \\", "\t\t\tif (itr->p->x && itr->p->i < itr->p->x->n) return 1; \\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t--itr->p; \\", "\t\t\tif (itr->p->x && itr->p->i < itr->p->x->n) return 1; \\", "\t\t} \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (itr->p->x && itr->p->i < itr->p->x->n) return 1; \\", "\t\t} \\", "\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t} \\", "\tstatic inline int kb_itr_prev_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_prev_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_prev_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_prev_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tif (itr->p == NULL) return 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_prev_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tif (itr->p == NULL) return 0; \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\tif (itr->p == NULL) return 0; \\", "\t\tfor (;;) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\tif (itr->p == NULL) return 0; \\", "\t\tfor (;;) { \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\tif (itr->p == NULL) return 0; \\", "\t\tfor (;;) { \\", "\t\t\twhile (itr->p->x && itr->p->i >= 0) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tfor (;;) { \\", "\t\t\twhile (itr->p->x && itr->p->i >= 0) { \\", "\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\twhile (itr->p->x && itr->p->i >= 0) { \\", "\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\titr->p[1].i = itr->p[1].x ? itr->p[1].x->n : -1; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\twhile (itr->p->x && itr->p->i >= 0) { \\", "\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\titr->p[1].i = itr->p[1].x ? itr->p[1].x->n : -1; \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[itr->p->i] : 0; \\", "\t\t\t\titr->p[1].i = itr->p[1].x ? itr->p[1].x->n : -1; \\", "\t\t\t\t++itr->p; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].i = itr->p[1].x ? itr->p[1].x->n : -1; \\", "\t\t\t\t++itr->p; \\", "\t\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p[1].i = itr->p[1].x ? itr->p[1].x->n : -1; \\", "\t\t\t\t++itr->p; \\", "\t\t\t} \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t\t++itr->p; \\", "\t\t\t} \\", "\t\t\tif (itr->p == itr->stack) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} \\", "\t\t\tif (itr->p == itr->stack) { \\", "\t\t\t\titr->p = NULL; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (itr->p == itr->stack) { \\", "\t\t\t\titr->p = NULL; \\", "\t\t\t\treturn 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\titr->p = NULL; \\", "\t\t\t\treturn 0; \\", "\t\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t\treturn 0; \\", "\t\t\t} \\", "\t\t\t--itr->p; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} \\", "\t\t\t--itr->p; \\", "\t\t\t--itr->p->i; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t} \\", "\t\t\t--itr->p; \\", "\t\t\t--itr->p->i; \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t--itr->p; \\", "\t\t\t--itr->p->i; \\", "\t\t\tif (itr->p->x && itr->p->i >= 0) return 1; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t--itr->p; \\", "\t\t\t--itr->p->i; \\", "\t\t\tif (itr->p->x && itr->p->i >= 0) return 1; \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t--itr->p->i; \\", "\t\t\tif (itr->p->x && itr->p->i >= 0) return 1; \\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\t--itr->p->i; \\", "\t\t\tif (itr->p->x && itr->p->i >= 0) return 1; \\", "\t\t} \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (itr->p->x && itr->p->i >= 0) return 1; \\", "\t\t} \\", "\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t} \\", "\tstatic inline int kb_itr_getp_##name(kbtree_##name##_t *b, key_t * __restrict k, kbitr_##name##_t *itr) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_getp_##name(kbtree_##name##_t *b, key_t * __restrict k, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_getp_##name(kbtree_##name##_t *b, key_t * __restrict k, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_getp_##name(kbtree_##name##_t *b, key_t * __restrict k, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tif (b->n_keys == 0) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_getp_##name(kbtree_##name##_t *b, key_t * __restrict k, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tif (b->n_keys == 0) { \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\tif (b->n_keys == 0) { \\", "            itr->p = NULL; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["        } \\", "\t\tint i, r = 0; \\", "\t\titr->p = itr->stack; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tint i, r = 0; \\", "\t\titr->p = itr->stack; \\", "\t\titr->p->x = b->root; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p = itr->stack; \\", "\t\titr->p->x = b->root; \\", "\t\twhile (itr->p->x) { \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p->x = b->root; \\", "\t\twhile (itr->p->x) { \\", "\t\t\ti = __kb_getp_aux_##name(itr->p->x, k, &r); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\twhile (itr->p->x) { \\", "\t\t\ti = __kb_getp_aux_##name(itr->p->x, k, &r); \\", "\t\t\titr->p->i = i; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\ti = __kb_getp_aux_##name(itr->p->x, k, &r); \\", "\t\t\titr->p->i = i; \\", "\t\t\tif (i >= 0 && r == 0) return 1; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\titr->p->i = i; \\", "\t\t\tif (i >= 0 && r == 0) return 1; \\", "\t\t\t++itr->p->i; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\titr->p->i = i; \\", "\t\t\tif (i >= 0 && r == 0) return 1; \\", "\t\t\t++itr->p->i; \\"], "readability/braces"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0 && r == 0) return 1; \\", "\t\t\t++itr->p->i; \\", "\t\t\tassert(itr->p->i <= 21); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tif (i >= 0 && r == 0) return 1; \\", "\t\t\t++itr->p->i; \\", "\t\t\tassert(itr->p->i <= 21); \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++itr->p->i; \\", "\t\t\tassert(itr->p->i <= 21); \\", "\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[i + 1] : 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\tassert(itr->p->i <= 21); \\", "\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[i + 1] : 0; \\", "\t\t\t++itr->p; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[i + 1] : 0; \\", "\t\t\t++itr->p; \\", "\t\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t\titr->p[1].x = itr->p->x->is_internal? __KB_PTR(b, itr->p->x)[i + 1] : 0; \\", "\t\t\t++itr->p; \\", "\t\t} \\"], "readability/increment"]
["src/nvim/lib/kbtree.h", ["\t\t\t++itr->p; \\", "\t\t} \\", "\t\titr->p->i = 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\t} \\", "\t\titr->p->i = 0; \\", "\t\treturn 0; \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\titr->p->i = 0; \\", "\t\treturn 0; \\", "\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\treturn 0; \\", "\t} \\", "\tstatic inline int kb_itr_get_##name(kbtree_##name##_t *b, key_t k, kbitr_##name##_t *itr) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_get_##name(kbtree_##name##_t *b, key_t k, kbitr_##name##_t *itr) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline int kb_itr_get_##name(kbtree_##name##_t *b, key_t k, kbitr_##name##_t *itr) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_get_##name(kbtree_##name##_t *b, key_t k, kbitr_##name##_t *itr) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_itr_getp_##name(b,&k,itr); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline int kb_itr_get_##name(kbtree_##name##_t *b, key_t k, kbitr_##name##_t *itr) \\", "\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_itr_getp_##name(b,&k,itr); \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_itr_getp_##name(b,&k,itr); \\", "\t} \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\\", "\t\treturn kb_itr_getp_##name(b,&k,itr); \\", "\t} \\"], "whitespace/comma"]
["src/nvim/lib/kbtree.h", ["\t\treturn kb_itr_getp_##name(b,&k,itr); \\", "\t} \\", "\tstatic inline void kb_del_itr_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline void kb_del_itr_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t} \\", "\tstatic inline void kb_del_itr_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\"], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_del_itr_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tkey_t k = kb_itr_key(itr); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\tstatic inline void kb_del_itr_##name(kbtree_##name##_t *b, kbitr_##name##_t *itr) \\", "\t{ \\", "\t\tkey_t k = kb_itr_key(itr); \\"], "whitespace/braces"]
["src/nvim/lib/kbtree.h", ["\t{ \\", "\t\tkey_t k = kb_itr_key(itr); \\", "\t\tkb_delp_##name(b, &k); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkey_t k = kb_itr_key(itr); \\", "\t\tkb_delp_##name(b, &k); \\", "\t\tkb_itr_getp_##name(b, &k, itr); \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkb_delp_##name(b, &k); \\", "\t\tkb_itr_getp_##name(b, &k, itr); \\", "\t} "], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkb_itr_getp_##name(b, &k, itr); \\", "\t} ", ""], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t\tkb_itr_getp_##name(b, &k, itr); \\", "\t} ", ""], "whitespace/end_of_line"]
["src/nvim/lib/kbtree.h", ["#define KBTREE_INIT(name, key_t, __cmp, T) \\", "  KBTREE_INIT_IMPL(name, key_t, kbnode_##name##_t, __cmp, T, (sizeof(kbnode_##name##_t)+(2*T)*sizeof(void *)))", ""], "whitespace/line_length"]
["src/nvim/lib/kbtree.h", ["#define KBTREE_INIT(name, key_t, __cmp, T) \\", "  KBTREE_INIT_IMPL(name, key_t, kbnode_##name##_t, __cmp, T, (sizeof(kbnode_##name##_t)+(2*T)*sizeof(void *)))", ""], "whitespace/operators"]
["src/nvim/lib/kbtree.h", ["", "#define KBTREE_INIT_IMPL(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\\", "\t__KB_TREE_T(name, key_t, T)\t\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["#define KBTREE_INIT_IMPL(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\\", "\t__KB_TREE_T(name, key_t, T)\t\t\t\t\t\t\t\\", "\t__KB_GET_AUX1(name, key_t, kbnode_t, __cmp)\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t__KB_TREE_T(name, key_t, T)\t\t\t\t\t\t\t\\", "\t__KB_GET_AUX1(name, key_t, kbnode_t, __cmp)\t\t\t\\", "\t__KB_GET(name, key_t, kbnode_t)\t\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t__KB_GET_AUX1(name, key_t, kbnode_t, __cmp)\t\t\t\\", "\t__KB_GET(name, key_t, kbnode_t)\t\t\t\t\t\t\\", "\t__KB_INTERVAL(name, key_t, kbnode_t)\t\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t__KB_GET(name, key_t, kbnode_t)\t\t\t\t\t\t\\", "\t__KB_INTERVAL(name, key_t, kbnode_t)\t\t\t\t\t\\", "\t__KB_PUT(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\t\\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t__KB_INTERVAL(name, key_t, kbnode_t)\t\t\t\t\t\\", "\t__KB_PUT(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\t\\", "\t__KB_DEL(name, key_t, kbnode_t, T) \\"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t__KB_PUT(name, key_t, kbnode_t, __cmp, T, ILEN)\t\t\t\t\\", "\t__KB_DEL(name, key_t, kbnode_t, T) \\", "\t__KB_ITR(name, key_t, kbnode_t)"], "whitespace/tab"]
["src/nvim/lib/kbtree.h", ["\t__KB_DEL(name, key_t, kbnode_t, T) \\", "\t__KB_ITR(name, key_t, kbnode_t)", ""], "whitespace/tab"]
