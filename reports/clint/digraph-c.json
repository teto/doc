["src/nvim/digraph.c", ["// digraphs added by the user", "static garray_T user_digraphs = {0, 0, (int)sizeof(digr_T), 10, NULL};", ""], "whitespace/braces"]
["src/nvim/digraph.c", ["// digraphs added by the user", "static garray_T user_digraphs = {0, 0, (int)sizeof(digr_T), 10, NULL};", ""], "whitespace/braces"]
["src/nvim/digraph.c", ["{", "  { 'N', 'U', 0x0a }, // LF for NUL", "  { 'S', 'H', 0x01 },"], "whitespace/comments"]
["src/nvim/digraph.c", ["{", "  static int backspaced; // character before K_BS", "  static int lastchar;   // last typed character"], "whitespace/comments"]
["src/nvim/digraph.c", ["  digr_T *dp = (digr_T *)user_digraphs.ga_data;", "  for (int i = 0; i < user_digraphs.ga_len; ++i) {", "    if (((int) dp->char1 == char1) && ((int) dp->char2 == char2)) {"], "readability/increment"]
["src/nvim/digraph.c", ["  for (int i = 0; i < user_digraphs.ga_len; ++i) {", "    if (((int) dp->char1 == char1) && ((int) dp->char2 == char2)) {", "      retval = dp->result;"], "whitespace/cast"]
["src/nvim/digraph.c", ["    }", "    ++dp;", "  }"], "readability/increment"]
["src/nvim/digraph.c", ["", "    for (int i = 0; dp->char1 != 0; ++i) {", "      if (((int) dp->char1 == char1) && ((int) dp->char2 == char2)) {"], "readability/increment"]
["src/nvim/digraph.c", ["    for (int i = 0; dp->char1 != 0; ++i) {", "      if (((int) dp->char1 == char1) && ((int) dp->char2 == char2)) {", "        retval = dp->result;"], "whitespace/cast"]
["src/nvim/digraph.c", ["      }", "      ++dp;", "    }"], "readability/increment"]
["src/nvim/digraph.c", ["    int i;", "    for (i = 0; i < user_digraphs.ga_len; ++i) {", "      if (((int)dp->char1 == char1) && ((int)dp->char2 == char2)) {"], "readability/increment"]
["src/nvim/digraph.c", ["      }", "      ++dp;", "    }"], "readability/increment"]
["src/nvim/digraph.c", ["", "  for (int i = 0; dp->char1 != NUL && !got_int; ++i) {", "    digr_T tmp;"], "readability/increment"]
["src/nvim/digraph.c", ["    assert(p >= buf);", "    vim_snprintf((char *)p, sizeof(buf) - (size_t)(p - buf), \" %3d\", dp->result);", "    msg_outtrans(buf);"], "whitespace/line_length"]
["src/nvim/digraph.c", ["///         been checked.", "char_u* keymap_init(void)", "{"], "whitespace/operators"]
["src/nvim/digraph.c", ["        xfree(kp->to);", "        --curbuf->b_kmap_ga.ga_len;", "      }"], "readability/increment"]
