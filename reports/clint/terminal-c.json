["src/nvim/terminal.c", ["  invalidate_terminal(data, MIN(dest.start_row, src.start_row),", "      MAX(dest.end_row, src.end_row));", "  return 1;"], "whitespace/alignment"]
["src/nvim/terminal.c", ["static int term_movecursor(VTermPos new, VTermPos old, int visible,", "    void *data)", "{"], "whitespace/alignment"]
["src/nvim/terminal.c", ["    memmove(term->sb_buffer + 1, term->sb_buffer,", "        sizeof(term->sb_buffer[0]) * (term->sb_current - 1));", ""], "whitespace/alignment"]
["src/nvim/terminal.c", ["    memmove(term->sb_buffer + 1, term->sb_buffer,", "        sizeof(term->sb_buffer[0]) * term->sb_current);", "  }"], "whitespace/alignment"]
["src/nvim/terminal.c", ["  memmove(term->sb_buffer, term->sb_buffer + 1,", "      sizeof(term->sb_buffer[0]) * (term->sb_current));", ""], "whitespace/alignment"]
["src/nvim/terminal.c", ["static void mouse_action(Terminal *term, int button, int row, int col,", "    bool drag, VTermModifier mod)", "{"], "whitespace/alignment"]
["src/nvim/terminal.c", ["    switch (c) {", "      case K_LEFTDRAG: drag = true;   FALLTHROUGH;", "      case K_LEFTMOUSE: button = 1; break;"], "whitespace/newline"]
["src/nvim/terminal.c", ["      case K_LEFTMOUSE: button = 1; break;", "      case K_MIDDLEDRAG: drag = true; FALLTHROUGH;", "      case K_MIDDLEMOUSE: button = 2; break;"], "whitespace/newline"]
["src/nvim/terminal.c", ["      case K_MIDDLEMOUSE: button = 2; break;", "      case K_RIGHTDRAG: drag = true;  FALLTHROUGH;", "      case K_RIGHTMOUSE: button = 3; break;"], "whitespace/newline"]
["src/nvim/terminal.c", ["        cell_len += utf_char2bytes((int)cell.chars[i],", "            (uint8_t *)ptr + cell_len);", "      }"], "whitespace/alignment"]
["src/nvim/terminal.c", ["    vterm_screen_get_cell(term->vts, (VTermPos){.row = row, .col = col},", "        cell);", "  }"], "whitespace/alignment"]
["src/nvim/terminal.c", ["  } else {", "    vterm_screen_get_cell(term->vts, (VTermPos){.row = row, .col = col},", "        cell);"], "whitespace/braces"]
["src/nvim/terminal.c", ["  } else {", "    vterm_screen_get_cell(term->vts, (VTermPos){.row = row, .col = col},", "        cell);"], "whitespace/braces"]
["src/nvim/terminal.c", ["  Terminal *term;", "  void *stub; (void)(stub);", "  // don't process autocommands while updating terminal buffers"], "whitespace/newline"]
