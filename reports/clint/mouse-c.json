["src/nvim/mouse.c", ["    // status line and no dragging happened.", "    if (dragwin != NULL && !did_drag)", "      flags &= ~(MOUSE_FOCUS | MOUSE_DID_MOVE);"], "readability/braces"]
["src/nvim/mouse.c", ["", "  if (flags & MOUSE_SETPOS)", "    goto retnomove;                             // ugly goto..."], "readability/braces"]
["src/nvim/mouse.c", ["  if (!(flags & MOUSE_FOCUS)) {", "    if (row < 0 || col < 0)                     // check if it makes sense", "      return IN_UNKNOWN;"], "readability/braces"]
["src/nvim/mouse.c", ["    if (on_status_line && on_sep_line) {", "      if (stl_connected(wp))", "        on_sep_line = 0;"], "readability/braces"]
["src/nvim/mouse.c", ["        on_sep_line = 0;", "      else", "        on_status_line = 0;"], "readability/braces"]
["src/nvim/mouse.c", ["    // (MOUSE_FOCUS was set above if we dragged first).", "    if (dragwin == NULL || (flags & MOUSE_RELEASED))", "      win_enter(wp, true);                      // can make wp invalid!"], "readability/braces"]
["src/nvim/mouse.c", ["    // set topline, to be able to check for double click ourselves", "    if (curwin != old_curwin)", "      set_mouse_topline(curwin);"], "readability/braces"]
["src/nvim/mouse.c", ["      // Don't use start_arrow() if we're in the same window", "      if (curwin == old_curwin)", "        return IN_STATUS_LINE;"], "readability/braces"]
["src/nvim/mouse.c", ["        return IN_STATUS_LINE;", "      else", "        return IN_STATUS_LINE | CURSOR_MOVED;"], "readability/braces"]
["src/nvim/mouse.c", ["      // Don't use start_arrow() if we're in the same window", "      if (curwin == old_curwin)", "        return IN_SEP_LINE;"], "readability/braces"]
["src/nvim/mouse.c", ["        return IN_SEP_LINE;", "      else", "        return IN_SEP_LINE | CURSOR_MOVED;"], "readability/braces"]
["src/nvim/mouse.c", ["      for (first = true; curwin->w_topline > 1; ) {", "        if (curwin->w_topfill < diff_check(curwin, curwin->w_topline))", "          ++count;"], "readability/braces"]
["src/nvim/mouse.c", ["        if (curwin->w_topfill < diff_check(curwin, curwin->w_topline))", "          ++count;", "        else"], "readability/increment"]
["src/nvim/mouse.c", ["          ++count;", "        else", "          count += plines(curwin->w_topline - 1);"], "readability/braces"]
["src/nvim/mouse.c", ["          count += plines(curwin->w_topline - 1);", "        if (!first && count > -row)", "          break;"], "readability/braces"]
["src/nvim/mouse.c", ["        if (curwin->w_topfill < diff_check(curwin, curwin->w_topline)) {", "          ++curwin->w_topfill;", "        } else {"], "readability/increment"]
["src/nvim/mouse.c", ["        } else {", "          --curwin->w_topline;", "          curwin->w_topfill = 0;"], "readability/increment"]
["src/nvim/mouse.c", ["        if (curwin->w_topfill > 0) {", "          ++count;", "        } else {"], "readability/increment"]
["src/nvim/mouse.c", ["        if (curwin->w_topfill > 0) {", "          --curwin->w_topfill;", "        } else {"], "readability/increment"]
["src/nvim/mouse.c", ["        } else {", "          ++curwin->w_topline;", "          curwin->w_topfill ="], "readability/increment"]
["src/nvim/mouse.c", ["    row -= count;", "    ++lnum;", "  }"], "readability/increment"]
["src/nvim/mouse.c", ["    off = win_col_off(win) - win_col_off2(win);", "    if (col < off)", "      col = off;"], "readability/braces"]
["src/nvim/mouse.c", ["  for (;; ) {", "    if (fp->fr_layout == FR_LEAF)", "      break;"], "readability/braces"]
["src/nvim/mouse.c", ["      for (fp = fp->fr_child; fp->fr_next != NULL; fp = fp->fr_next) {", "        if (*colp < fp->fr_width)", "          break;"], "readability/braces"]
["src/nvim/mouse.c", ["      for (fp = fp->fr_child; fp->fr_next != NULL; fp = fp->fr_next) {", "        if (*rowp < fp->fr_height)", "          break;"], "readability/braces"]
