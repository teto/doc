["src/nvim/cursor_shape.c", ["  { \"replace\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"r\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"cmdline_normal\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"c\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"cmdline_insert\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"ci\", SHAPE_CURSOR+SHAPE_MOUSE },"], "whitespace/line_length"]
["src/nvim/cursor_shape.c", ["  { \"cmdline_normal\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"c\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"cmdline_insert\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"ci\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"cmdline_replace\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"cr\", SHAPE_CURSOR+SHAPE_MOUSE },"], "whitespace/line_length"]
["src/nvim/cursor_shape.c", ["  { \"cmdline_insert\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"ci\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"cmdline_replace\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"cr\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"operator\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"o\", SHAPE_CURSOR+SHAPE_MOUSE },"], "whitespace/line_length"]
["src/nvim/cursor_shape.c", ["  { \"cmdline_replace\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"cr\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"operator\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"o\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"visual_select\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"ve\", SHAPE_CURSOR+SHAPE_MOUSE },"], "whitespace/line_length"]
["src/nvim/cursor_shape.c", ["  { \"operator\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"o\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"visual_select\", 0, 0, 0, 700L, 400L, 250L, 0, 0, \"ve\", SHAPE_CURSOR+SHAPE_MOUSE },", "  { \"cmdline_hover\", 0, 0, 0,   0L,   0L,   0L, 0, 0, \"e\", SHAPE_MOUSE },"], "whitespace/line_length"]
["src/nvim/cursor_shape.c", ["      PUT(dic, \"attr_id_lm\", INTEGER_OBJ(cur->id_lm ? syn_id2attr(cur->id_lm)", "                                                    : 0));", "    }"], "whitespace/alignment"]
["src/nvim/cursor_shape.c", ["          } else {", "            for (idx = 0; idx < SHAPE_IDX_COUNT; ++idx)", "              if (STRNICMP(modep, shape_table[idx].name, len) == 0)"], "readability/braces"]
["src/nvim/cursor_shape.c", ["          } else {", "            for (idx = 0; idx < SHAPE_IDX_COUNT; ++idx)", "              if (STRNICMP(modep, shape_table[idx].name, len) == 0)"], "readability/increment"]
["src/nvim/cursor_shape.c", ["            for (idx = 0; idx < SHAPE_IDX_COUNT; ++idx)", "              if (STRNICMP(modep, shape_table[idx].name, len) == 0)", "                break;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["                break;", "            if (idx == SHAPE_IDX_COUNT", "                    || (shape_table[idx].used_for & what) == 0)"], "readability/braces"]
["src/nvim/cursor_shape.c", ["            if (idx == SHAPE_IDX_COUNT", "                    || (shape_table[idx].used_for & what) == 0)", "              return (char_u *)N_(\"E546: Illegal mode\");"], "whitespace/alignment"]
["src/nvim/cursor_shape.c", ["              return (char_u *)N_(\"E546: Illegal mode\");", "            if (len == 2 && modep[0] == 'v' && modep[1] == 'e')", "              found_ve = true;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["", "        /* Parse the part after the colon */", "        for (p = colonp + 1; *p && *p != ','; ) {"], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["          {", "            /*", "             * First handle the ones with a number argument."], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["            len = 0;", "            if (STRNICMP(p, \"ver\", 3) == 0)", "              len = 3;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              len = 3;", "            else if (STRNICMP(p, \"hor\", 3) == 0)", "              len = 3;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              len = 3;", "            else if (STRNICMP(p, \"blinkwait\", 9) == 0)", "              len = 9;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              len = 9;", "            else if (STRNICMP(p, \"blinkon\", 7) == 0)", "              len = 7;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              len = 7;", "            else if (STRNICMP(p, \"blinkoff\", 8) == 0)", "              len = 8;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              p += len;", "              if (!ascii_isdigit(*p))", "                return (char_u *)N_(\"E548: digit expected\");"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              } else if (round == 2) {", "                if (len == 9)", "                  shape_table[idx].blinkwait = n;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["                  shape_table[idx].blinkwait = n;", "                else if (len == 7)", "                  shape_table[idx].blinkon = n;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["                  shape_table[idx].blinkon = n;", "                else", "                  shape_table[idx].blinkoff = n;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["            } else if (STRNICMP(p, \"block\", 5) == 0) {", "              if (round == 2)", "                shape_table[idx].shape = SHAPE_BLOCK;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["              p += 5;", "            } else {          /* must be a highlight group name then */", "              endp = vim_strchr(p, '-');"], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["              endp = vim_strchr(p, '-');", "              if (commap == NULL) {                       /* last part */", "                if (endp == NULL)"], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["              if (commap == NULL) {                       /* last part */", "                if (endp == NULL)", "                  endp = p + STRLEN(p);                  /* find end of part */"], "readability/braces"]
["src/nvim/cursor_shape.c", ["                if (endp == NULL)", "                  endp = p + STRLEN(p);                  /* find end of part */", "              } else if (endp > commap || endp == NULL) {"], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["              if (slashp != NULL && slashp < endp) {", "                /* \"group/langmap_group\" */", "                i = syn_check_group(p, (int)(slashp - p));"], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["                shape_table[idx].id = syn_check_group(p,", "                    (int)(endp - p));", "                shape_table[idx].id_lm = shape_table[idx].id;"], "whitespace/alignment"]
["src/nvim/cursor_shape.c", ["                shape_table[idx].id_lm = shape_table[idx].id;", "                if (slashp != NULL && slashp < endp)", "                  shape_table[idx].id = i;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["            }", "          }           /* if (what != SHAPE_MOUSE) */", ""], "readability/old_style_comment"]
["src/nvim/cursor_shape.c", ["", "          if (*p == '-')", "            ++p;"], "readability/braces"]
["src/nvim/cursor_shape.c", ["          if (*p == '-')", "            ++p;", "        }"], "readability/increment"]
["src/nvim/cursor_shape.c", ["", "  /* If the 's' flag is not given, use the 'v' cursor for 's' */", "  if (!found_ve) {"], "readability/old_style_comment"]
