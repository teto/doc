["src/nvim/syntax_defs.h", ["", "#endif // NVIM_SYNTAX_DEFS_H", ""], "build/header_guard"]
["src/nvim/syntax_defs.h", ["", "# define SST_MIN_ENTRIES 150    /* minimal size for state stack array */", "# define SST_MAX_ENTRIES 1000   /* maximal size for state stack array */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["# define SST_MIN_ENTRIES 150    /* minimal size for state stack array */", "# define SST_MAX_ENTRIES 1000   /* maximal size for state stack array */", "# define SST_FIX_STATES  7      /* size of sst_stack[]. */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["# define SST_MAX_ENTRIES 1000   /* maximal size for state stack array */", "# define SST_FIX_STATES  7      /* size of sst_stack[]. */", "# define SST_DIST        16     /* normal distance between entries */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["# define SST_FIX_STATES  7      /* size of sst_stack[]. */", "# define SST_DIST        16     /* normal distance between entries */", "# define SST_INVALID    (synstate_T *)-1        /* invalid syn_state pointer */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["# define SST_DIST        16     /* normal distance between entries */", "# define SST_INVALID    (synstate_T *)-1        /* invalid syn_state pointer */", ""], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["", "/* struct passed to in_id_list() */", "struct sp_syn {"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["", "/*", " * Each keyword has one keyentry, which is linked in a hash list."], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["", "/*", " * Struct used to store one state of the state stack."], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["typedef struct buf_state {", "  int bs_idx;                    /* index of pattern */", "  int bs_flags;                  /* flags for pattern */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["  int bs_idx;                    /* index of pattern */", "  int bs_flags;                  /* flags for pattern */", "  int bs_seqnr;                  /* stores si_seqnr */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["  int bs_flags;                  /* flags for pattern */", "  int bs_seqnr;                  /* stores si_seqnr */", "  int bs_cchar;                  /* stores si_cchar */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["  int bs_seqnr;                  /* stores si_seqnr */", "  int bs_cchar;                  /* stores si_cchar */", "  reg_extmatch_T *bs_extmatch;   /* external matches from start pattern */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["  int bs_cchar;                  /* stores si_cchar */", "  reg_extmatch_T *bs_extmatch;   /* external matches from start pattern */", "} bufstate_T;"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["", "/*", " * syn_state contains the syntax state stack for the start of one line."], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["struct syn_state {", "  synstate_T  *sst_next;        /* next entry in used or free list */", "  linenr_T sst_lnum;            /* line number for this state */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["  synstate_T  *sst_next;        /* next entry in used or free list */", "  linenr_T sst_lnum;            /* line number for this state */", "  union {"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["  union {", "    bufstate_T sst_stack[SST_FIX_STATES];          /* short state stack */", "    garray_T sst_ga;            /* growarray for long state stack */"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["    bufstate_T sst_stack[SST_FIX_STATES];          /* short state stack */", "    garray_T sst_ga;            /* growarray for long state stack */", "  } sst_union;"], "readability/old_style_comment"]
["src/nvim/syntax_defs.h", ["", "#endif // NVIM_SYNTAX_DEFS_H", ""], "whitespace/comments"]
