["src/nvim/garray.c", ["", "      --gap->ga_len;", "    }"], "readability/increment"]
["src/nvim/garray.c", ["{", "  const size_t nelem = (size_t) gap->ga_len;", "  const char **strings = gap->ga_data;"], "whitespace/cast"]
["src/nvim/garray.c", ["  if (nelem == 0) {", "    return (char_u *) xstrdup(\"\");", "  }"], "whitespace/cast"]
["src/nvim/garray.c", ["  }", "  strcpy(s, strings[nelem - 1]);", ""], "runtime/printf"]
["src/nvim/garray.c", ["", "  return (char_u *) ret;", "}"], "whitespace/cast"]
["src/nvim/garray.c", ["/// @returns the concatenated strings", "char_u* ga_concat_strings(const garray_T *gap) FUNC_ATTR_NONNULL_RET", "{"], "whitespace/operators"]
["src/nvim/garray.c", ["", "  ga_concat_len(gap, (const char *restrict) s, strlen((char *) s));", "}"], "whitespace/cast"]
["src/nvim/garray.c", ["  if (len) {", "    ga_grow(gap, (int) len);", "    char *data = gap->ga_data;"], "whitespace/cast"]
["src/nvim/garray.c", ["    memcpy(data + gap->ga_len, s, len);", "    gap->ga_len += (int) len;", "  }"], "whitespace/cast"]
