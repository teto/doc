["src/nvim/lib/ringbuf.h", ["    ((rb)->first == NULL ? 0 \\", "     : ((rb)->next == (rb)->first) ? (size_t) ((rb)->buf_end - (rb)->buf) + 1 \\", "     : ((rb)->next > (rb)->first) ? (size_t) ((rb)->next - (rb)->first) \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["     : ((rb)->next == (rb)->first) ? (size_t) ((rb)->buf_end - (rb)->buf) + 1 \\", "     : ((rb)->next > (rb)->first) ? (size_t) ((rb)->next - (rb)->first) \\", "     : (size_t) ((rb)->next - (rb)->buf + (rb)->buf_end - (rb)->first + 1))"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["     : ((rb)->next > (rb)->first) ? (size_t) ((rb)->next - (rb)->first) \\", "     : (size_t) ((rb)->next - (rb)->buf + (rb)->buf_end - (rb)->first + 1))", ""], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    size_t varname##_length_fa_ = _RINGBUF_LENGTH(rb); \\", "    for (RBType *varname = ((rb)->first == NULL ? (rb)->next : (rb)->first); \\", "         varname##_length_fa_; \\"], "readability/braces"]
["src/nvim/lib/ringbuf.h", ["    size_t varname##_length_ib_ = _RINGBUF_LENGTH(rb); \\", "    for (varname = ((rb)->next == (rb)->buf ? (rb)->buf_end : (rb)->next - 1); \\", "         varname##_length_ib_; \\"], "readability/braces"]
["src/nvim/lib/ringbuf.h", ["{ \\", "  return (size_t) (rb->buf_end - rb->buf) + 1; \\", "} \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    memmove(insertpos + 1, insertpos, \\", "            (size_t) ((uintptr_t) rb->next - (uintptr_t) insertpos)); \\", "  } else { \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    memmove(rb->buf + 1, rb->buf, \\", "            (size_t) ((uintptr_t) rb->next - (uintptr_t) rb->buf)); \\", "    *rb->buf = *rb->buf_end; \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    memmove(insertpos + 1, insertpos, \\", "            (size_t) ((uintptr_t) (rb->buf_end + 1) - (uintptr_t) insertpos)); \\", "  } \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    memmove(rb->first + 1, rb->first, \\", "            (size_t) ((uintptr_t) rmpos - (uintptr_t) rb->first)); \\", "    rb->first = _RINGBUF_NEXT(rb, rb->first); \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    memmove(rmpos, rmpos + 1, \\", "            (size_t) ((uintptr_t) rb->next - (uintptr_t) rmpos)); \\", "    rb->next = _RINGBUF_PREV(rb, rb->next); \\"], "whitespace/cast"]
["src/nvim/lib/ringbuf.h", ["    memmove(rb->first + 1, rb->first, \\", "            (size_t) ((uintptr_t) rmpos - (uintptr_t) rb->first)); \\", "    rb->first = _RINGBUF_NEXT(rb, rb->first); \\"], "whitespace/cast"]
